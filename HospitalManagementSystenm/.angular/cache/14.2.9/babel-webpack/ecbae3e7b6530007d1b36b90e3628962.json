{"ast":null,"code":"/**\n * @license Angular v7.2.16\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\nimport { Injectable, NgModule, Version } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ɵgetDOM } from '@angular/platform-browser';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * A backend for http that uses the `XMLHttpRequest` browser API.\n *\n * Take care not to evaluate this in non-browser contexts.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nclass BrowserXhr {\n  constructor() {}\n  /**\n   * @return {?}\n   */\n\n\n  build() {\n    return (\n      /** @type {?} */\n      new XMLHttpRequest()\n    );\n  }\n\n}\n\nBrowserXhr.ɵfac = function BrowserXhr_Factory(t) {\n  return new (t || BrowserXhr)();\n};\n\nBrowserXhr.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: BrowserXhr,\n  factory: BrowserXhr.ɵfac\n});\n/** @nocollapse */\n\nBrowserXhr.ctorParameters = () => [];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BrowserXhr, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @enum {number} */\n\n\nconst RequestMethod = {\n  Get: 0,\n  Post: 1,\n  Put: 2,\n  Delete: 3,\n  Options: 4,\n  Head: 5,\n  Patch: 6\n};\nRequestMethod[RequestMethod.Get] = 'Get';\nRequestMethod[RequestMethod.Post] = 'Post';\nRequestMethod[RequestMethod.Put] = 'Put';\nRequestMethod[RequestMethod.Delete] = 'Delete';\nRequestMethod[RequestMethod.Options] = 'Options';\nRequestMethod[RequestMethod.Head] = 'Head';\nRequestMethod[RequestMethod.Patch] = 'Patch';\n/** @enum {number} */\n\nconst ReadyState = {\n  Unsent: 0,\n  Open: 1,\n  HeadersReceived: 2,\n  Loading: 3,\n  Done: 4,\n  Cancelled: 5\n};\nReadyState[ReadyState.Unsent] = 'Unsent';\nReadyState[ReadyState.Open] = 'Open';\nReadyState[ReadyState.HeadersReceived] = 'HeadersReceived';\nReadyState[ReadyState.Loading] = 'Loading';\nReadyState[ReadyState.Done] = 'Done';\nReadyState[ReadyState.Cancelled] = 'Cancelled';\n/** @enum {number} */\n\nconst ResponseType = {\n  Basic: 0,\n  Cors: 1,\n  Default: 2,\n  Error: 3,\n  Opaque: 4\n};\nResponseType[ResponseType.Basic] = 'Basic';\nResponseType[ResponseType.Cors] = 'Cors';\nResponseType[ResponseType.Default] = 'Default';\nResponseType[ResponseType.Error] = 'Error';\nResponseType[ResponseType.Opaque] = 'Opaque';\n/** @enum {number} */\n\nconst ContentType = {\n  NONE: 0,\n  JSON: 1,\n  FORM: 2,\n  FORM_DATA: 3,\n  TEXT: 4,\n  BLOB: 5,\n  ARRAY_BUFFER: 6\n};\nContentType[ContentType.NONE] = 'NONE';\nContentType[ContentType.JSON] = 'JSON';\nContentType[ContentType.FORM] = 'FORM';\nContentType[ContentType.FORM_DATA] = 'FORM_DATA';\nContentType[ContentType.TEXT] = 'TEXT';\nContentType[ContentType.BLOB] = 'BLOB';\nContentType[ContentType.ARRAY_BUFFER] = 'ARRAY_BUFFER';\n/** @enum {number} */\n\nconst ResponseContentType = {\n  Text: 0,\n  Json: 1,\n  ArrayBuffer: 2,\n  Blob: 3\n};\nResponseContentType[ResponseContentType.Text] = 'Text';\nResponseContentType[ResponseContentType.Json] = 'Json';\nResponseContentType[ResponseContentType.ArrayBuffer] = 'ArrayBuffer';\nResponseContentType[ResponseContentType.Blob] = 'Blob';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n *\n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * import {Headers} from '\\@angular/http';\n *\n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n *\n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n *\n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\nclass Headers {\n  // TODO(vicb): any -> string|string[]\n\n  /**\n   * @param {?=} headers\n   */\n  constructor(headers) {\n    /**\n     * \\@internal header names are lower case\n     */\n    this._headers = new Map();\n    /**\n     * \\@internal map lower case names to actual names\n     */\n\n    this._normalizedNames = new Map();\n\n    if (!headers) {\n      return;\n    }\n\n    if (headers instanceof Headers) {\n      headers.forEach((values, name) => {\n        values.forEach(value => this.append(name, value));\n      });\n      return;\n    }\n\n    Object.keys(headers).forEach(name => {\n      /** @type {?} */\n      const values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n      this.delete(name);\n      values.forEach(value => this.append(name, value));\n    });\n  }\n  /**\n   * Returns a new Headers instance from the given DOMString of Response Headers\n   * @param {?} headersString\n   * @return {?}\n   */\n\n\n  static fromResponseHeaderString(headersString) {\n    /** @type {?} */\n    const headers = new Headers();\n    headersString.split('\\n').forEach(line => {\n      /** @type {?} */\n      const index = line.indexOf(':');\n\n      if (index > 0) {\n        /** @type {?} */\n        const name = line.slice(0, index);\n        /** @type {?} */\n\n        const value = line.slice(index + 1).trim();\n        headers.set(name, value);\n      }\n    });\n    return headers;\n  }\n  /**\n   * Appends a header to existing list of header values for a given header name.\n   * @param {?} name\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  append(name, value) {\n    /** @type {?} */\n    const values = this.getAll(name);\n\n    if (values === null) {\n      this.set(name, value);\n    } else {\n      values.push(value);\n    }\n  }\n  /**\n   * Deletes all header values for the given name.\n   * @param {?} name\n   * @return {?}\n   */\n\n\n  delete(name) {\n    /** @type {?} */\n    const lcName = name.toLowerCase();\n\n    this._normalizedNames.delete(lcName);\n\n    this._headers.delete(lcName);\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n\n\n  forEach(fn) {\n    this._headers.forEach((values, lcName) => fn(values, this._normalizedNames.get(lcName), this._headers));\n  }\n  /**\n   * Returns first header that matches given name.\n   * @param {?} name\n   * @return {?}\n   */\n\n\n  get(name) {\n    /** @type {?} */\n    const values = this.getAll(name);\n\n    if (values === null) {\n      return null;\n    }\n\n    return values.length > 0 ? values[0] : null;\n  }\n  /**\n   * Checks for existence of header by given name.\n   * @param {?} name\n   * @return {?}\n   */\n\n\n  has(name) {\n    return this._headers.has(name.toLowerCase());\n  }\n  /**\n   * Returns the names of the headers\n   * @return {?}\n   */\n\n\n  keys() {\n    return Array.from(this._normalizedNames.values());\n  }\n  /**\n   * Sets or overrides header value for given name.\n   * @param {?} name\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set(name, value) {\n    if (Array.isArray(value)) {\n      if (value.length) {\n        this._headers.set(name.toLowerCase(), [value.join(',')]);\n      }\n    } else {\n      this._headers.set(name.toLowerCase(), [value]);\n    }\n\n    this.mayBeSetNormalizedName(name);\n  }\n  /**\n   * Returns values of all headers.\n   * @return {?}\n   */\n\n\n  values() {\n    return Array.from(this._headers.values());\n  }\n  /**\n   * Returns string of all headers.\n   * @return {?}\n   */\n  // TODO(vicb): returns {[name: string]: string[]}\n\n\n  toJSON() {\n    /** @type {?} */\n    const serialized = {};\n\n    this._headers.forEach((values, name) => {\n      /** @type {?} */\n      const split = [];\n      values.forEach(v => split.push(...v.split(',')));\n      serialized[\n      /** @type {?} */\n      this._normalizedNames.get(name)] = split;\n    });\n\n    return serialized;\n  }\n  /**\n   * Returns list of header values for a given name.\n   * @param {?} name\n   * @return {?}\n   */\n\n\n  getAll(name) {\n    return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\n  }\n  /**\n   * This method is not implemented.\n   * @return {?}\n   */\n\n\n  entries() {\n    throw new Error('\"entries\" method is not implemented on Headers class');\n  }\n  /**\n   * @private\n   * @param {?} name\n   * @return {?}\n   */\n\n\n  mayBeSetNormalizedName(name) {\n    /** @type {?} */\n    const lcName = name.toLowerCase();\n\n    if (!this._normalizedNames.has(lcName)) {\n      this._normalizedNames.set(lcName, name);\n    }\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Creates a response options object to be optionally provided when instantiating a\n * {\\@link Response}.\n *\n * This class is based on the `ResponseInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\n *\n * All values are null by default. Typical defaults can be found in the\n * {\\@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n *\n * This class may be used in tests to build {\\@link Response Responses} for\n * mock responses (see {\\@link MockBackend}).\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import {ResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new ResponseOptions({\n *   body: '{\"name\":\"Jeff\"}'\n * });\n * var res = new Response(options);\n *\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nclass ResponseOptions {\n  /**\n   * @param {?=} opts\n   */\n  constructor(opts = {}) {\n    const {\n      body,\n      status,\n      headers,\n      statusText,\n      type,\n      url\n    } = opts;\n    this.body = body != null ? body : null;\n    this.status = status != null ? status : null;\n    this.headers = headers != null ? headers : null;\n    this.statusText = statusText != null ? statusText : null;\n    this.type = type != null ? type : null;\n    this.url = url != null ? url : null;\n  }\n  /**\n   * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n   * override\n   * existing values. This method will not change the values of the instance on which it is being\n   * called.\n   *\n   * This may be useful when sharing a base `ResponseOptions` object inside tests,\n   * where certain properties may change from test to test.\n   *\n   * \\@usageNotes\n   * ### Example\n   *\n   * ```typescript\n   * import {ResponseOptions, Response} from '\\@angular/http';\n   *\n   * var options = new ResponseOptions({\n   *   body: {name: 'Jeff'}\n   * });\n   * var res = new Response(options.merge({\n   *   url: 'https://google.com'\n   * }));\n   * console.log('options.url:', options.url); // null\n   * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n   * console.log('res.url:', res.url); // https://google.com\n   * ```\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  merge(options) {\n    return new ResponseOptions({\n      body: options && options.body != null ? options.body : this.body,\n      status: options && options.status != null ? options.status : this.status,\n      headers: options && options.headers != null ? options.headers : this.headers,\n      statusText: options && options.statusText != null ? options.statusText : this.statusText,\n      type: options && options.type != null ? options.type : this.type,\n      url: options && options.url != null ? options.url : this.url\n    });\n  }\n\n}\n/**\n * Subclass of {\\@link ResponseOptions}, with default values.\n *\n * Default values:\n *  * status: 200\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link ResponseOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create {\\@link Response Responses}.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import {provide} from '\\@angular/core';\n * import {bootstrap} from '\\@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n * '\\@angular/http';\n * import {App} from './myapp';\n *\n * class MyOptions extends BaseResponseOptions {\n *   headers:Headers = new Headers({network: 'github'});\n * }\n *\n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Response}\n * object.\n *\n * ### Example\n *\n * ```\n * import {BaseResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new BaseResponseOptions();\n * var res = new Response(options.merge({\n *   body: 'Angular',\n *   headers: new Headers({framework: 'angular'})\n * }));\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n * console.log('res.text():', res.text()); // Angular;\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nclass BaseResponseOptions extends ResponseOptions {\n  constructor() {\n    super({\n      status: 200,\n      statusText: 'Ok',\n      type: ResponseType.Default,\n      headers: new Headers()\n    });\n  }\n\n}\n\nBaseResponseOptions.ɵfac = function BaseResponseOptions_Factory(t) {\n  return new (t || BaseResponseOptions)();\n};\n\nBaseResponseOptions.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: BaseResponseOptions,\n  factory: BaseResponseOptions.ɵfac\n});\n/** @nocollapse */\n\nBaseResponseOptions.ctorParameters = () => [];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BaseResponseOptions, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Abstract class from which real backends are derived.\n *\n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n * {\\@link Request}.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n * @abstract\n */\n\n\nclass ConnectionBackend {}\n/**\n * Abstract class from which real connections are derived.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n * @abstract\n */\n\n\nclass Connection {}\n/**\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n * @abstract\n */\n\n\nclass XSRFStrategy {}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @param {?} method\n * @return {?}\n */\n\n\nfunction normalizeMethodName(method) {\n  if (typeof method !== 'string') return method;\n\n  switch (method.toUpperCase()) {\n    case 'GET':\n      return RequestMethod.Get;\n\n    case 'POST':\n      return RequestMethod.Post;\n\n    case 'PUT':\n      return RequestMethod.Put;\n\n    case 'DELETE':\n      return RequestMethod.Delete;\n\n    case 'OPTIONS':\n      return RequestMethod.Options;\n\n    case 'HEAD':\n      return RequestMethod.Head;\n\n    case 'PATCH':\n      return RequestMethod.Patch;\n  }\n\n  throw new Error(`Invalid request method. The method \"${method}\" is not supported.`);\n}\n/** @type {?} */\n\n\nconst isSuccess = status => status >= 200 && status < 300;\n/**\n * @param {?} xhr\n * @return {?}\n */\n\n\nfunction getResponseURL(xhr) {\n  if ('responseURL' in xhr) {\n    return xhr.responseURL;\n  }\n\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n\n  return null;\n}\n/**\n * @param {?} input\n * @return {?}\n */\n\n\nfunction stringToArrayBuffer(input) {\n  /** @type {?} */\n  const view = new Uint16Array(input.length);\n\n  for (let i = 0, strLen = input.length; i < strLen; i++) {\n    view[i] = input.charCodeAt(i);\n  }\n\n  return view.buffer;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @param {?=} rawParams\n * @return {?}\n */\n\n\nfunction paramParser(rawParams = '') {\n  /** @type {?} */\n  const map = new Map();\n\n  if (rawParams.length > 0) {\n    /** @type {?} */\n    const params = rawParams.split('&');\n    params.forEach(param => {\n      /** @type {?} */\n      const eqIdx = param.indexOf('=');\n      const [key, val] = eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)];\n      /** @type {?} */\n\n      const list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n\n  return map;\n}\n/**\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n *\n */\n\n\nclass QueryEncoder {\n  /**\n   * @param {?} key\n   * @return {?}\n   */\n  encodeKey(key) {\n    return standardEncoding(key);\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  encodeValue(value) {\n    return standardEncoding(value);\n  }\n\n}\n/**\n * @param {?} v\n * @return {?}\n */\n\n\nfunction standardEncoding(v) {\n  return encodeURIComponent(v).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/gi, '$').replace(/%2C/gi, ',').replace(/%3B/gi, ';').replace(/%2B/gi, '+').replace(/%3D/gi, '=').replace(/%3F/gi, '?').replace(/%2F/gi, '/');\n}\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n *\n * This class accepts an optional second parameter of ${\\@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n *\n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n *\n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n *\n * ```\n * import {URLSearchParams, QueryEncoder} from '\\@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n *\n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n *\n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nclass URLSearchParams {\n  /**\n   * @param {?=} rawParams\n   * @param {?=} queryEncoder\n   */\n  constructor(rawParams = '', queryEncoder = new QueryEncoder()) {\n    this.rawParams = rawParams;\n    this.queryEncoder = queryEncoder;\n    this.paramsMap = paramParser(rawParams);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  clone() {\n    /** @type {?} */\n    const clone = new URLSearchParams('', this.queryEncoder);\n    clone.appendAll(this);\n    return clone;\n  }\n  /**\n   * @param {?} param\n   * @return {?}\n   */\n\n\n  has(param) {\n    return this.paramsMap.has(param);\n  }\n  /**\n   * @param {?} param\n   * @return {?}\n   */\n\n\n  get(param) {\n    /** @type {?} */\n    const storedParam = this.paramsMap.get(param);\n    return Array.isArray(storedParam) ? storedParam[0] : null;\n  }\n  /**\n   * @param {?} param\n   * @return {?}\n   */\n\n\n  getAll(param) {\n    return this.paramsMap.get(param) || [];\n  }\n  /**\n   * @param {?} param\n   * @param {?} val\n   * @return {?}\n   */\n\n\n  set(param, val) {\n    if (val === void 0 || val === null) {\n      this.delete(param);\n      return;\n    }\n    /** @type {?} */\n\n\n    const list = this.paramsMap.get(param) || [];\n    list.length = 0;\n    list.push(val);\n    this.paramsMap.set(param, list);\n  } // A merge operation\n  // For each name-values pair in `searchParams`, perform `set(name, values[0])`\n  //\n  // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4], c=[8], b=[7]\"\n  //\n  // TODO(@caitp): document this better\n\n  /**\n   * @param {?} searchParams\n   * @return {?}\n   */\n\n\n  setAll(searchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      /** @type {?} */\n      const list = this.paramsMap.get(param) || [];\n      list.length = 0;\n      list.push(value[0]);\n      this.paramsMap.set(param, list);\n    });\n  }\n  /**\n   * @param {?} param\n   * @param {?} val\n   * @return {?}\n   */\n\n\n  append(param, val) {\n    if (val === void 0 || val === null) return;\n    /** @type {?} */\n\n    const list = this.paramsMap.get(param) || [];\n    list.push(val);\n    this.paramsMap.set(param, list);\n  } // A merge operation\n  // For each name-values pair in `searchParams`, perform `append(name, value)`\n  // for each value in `values`.\n  //\n  // E.g: \"a=[1,2], c=[8]\" + \"a=[3,4], b=[7]\" = \"a=[1,2,3,4], c=[8], b=[7]\"\n  //\n  // TODO(@caitp): document this better\n\n  /**\n   * @param {?} searchParams\n   * @return {?}\n   */\n\n\n  appendAll(searchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      /** @type {?} */\n      const list = this.paramsMap.get(param) || [];\n\n      for (let i = 0; i < value.length; ++i) {\n        list.push(value[i]);\n      }\n\n      this.paramsMap.set(param, list);\n    });\n  } // A merge operation\n  // For each name-values pair in `searchParams`, perform `delete(name)`,\n  // followed by `set(name, values)`\n  //\n  // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4,5,6], c=[8], b=[7]\"\n  //\n  // TODO(@caitp): document this better\n\n  /**\n   * @param {?} searchParams\n   * @return {?}\n   */\n\n\n  replaceAll(searchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      /** @type {?} */\n      const list = this.paramsMap.get(param) || [];\n      list.length = 0;\n\n      for (let i = 0; i < value.length; ++i) {\n        list.push(value[i]);\n      }\n\n      this.paramsMap.set(param, list);\n    });\n  }\n  /**\n   * @return {?}\n   */\n\n\n  toString() {\n    /** @type {?} */\n    const paramsList = [];\n    this.paramsMap.forEach((values, k) => {\n      values.forEach(v => paramsList.push(this.queryEncoder.encodeKey(k) + '=' + this.queryEncoder.encodeValue(v)));\n    });\n    return paramsList.join('&');\n  }\n  /**\n   * @param {?} param\n   * @return {?}\n   */\n\n\n  delete(param) {\n    this.paramsMap.delete(param);\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * HTTP request body used by both {\\@link Request} and {\\@link Response}\n * https://fetch.spec.whatwg.org/#body\n * @abstract\n */\n\n\nclass Body {\n  /**\n   * Attempts to return body as parsed `JSON` object, or raises an exception.\n   * @return {?}\n   */\n  json() {\n    if (typeof this._body === 'string') {\n      return JSON.parse(\n      /** @type {?} */\n      this._body);\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      return JSON.parse(this.text());\n    }\n\n    return this._body;\n  }\n  /**\n   * Returns the body as a string, presuming `toString()` can be called on the response body.\n   *\n   * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n   * bytes in the buffer will be interpreted. Valid values are:\n   *\n   * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n   *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n   *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n   *   into consideration. This is the default behavior to avoid breaking apps, but should be\n   *   considered deprecated.\n   *\n   * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n   * @param {?=} encodingHint\n   * @return {?}\n   */\n\n\n  text(encodingHint = 'legacy') {\n    if (this._body instanceof URLSearchParams) {\n      return this._body.toString();\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      switch (encodingHint) {\n        case 'legacy':\n          return String.fromCharCode.apply(null, new Uint16Array(\n          /** @type {?} */\n          this._body));\n\n        case 'iso-8859':\n          return String.fromCharCode.apply(null, new Uint8Array(\n          /** @type {?} */\n          this._body));\n\n        default:\n          throw new Error(`Invalid value for encodingHint: ${encodingHint}`);\n      }\n    }\n\n    if (this._body == null) {\n      return '';\n    }\n\n    if (typeof this._body === 'object') {\n      return JSON.stringify(this._body, null, 2);\n    }\n\n    return this._body.toString();\n  }\n  /**\n   * Return the body as an ArrayBuffer\n   * @return {?}\n   */\n\n\n  arrayBuffer() {\n    if (this._body instanceof ArrayBuffer) {\n      return (\n        /** @type {?} */\n        this._body\n      );\n    }\n\n    return stringToArrayBuffer(this.text());\n  }\n  /**\n   * Returns the request's body as a Blob, assuming that body exists.\n   * @return {?}\n   */\n\n\n  blob() {\n    if (this._body instanceof Blob) {\n      return (\n        /** @type {?} */\n        this._body\n      );\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      return new Blob([this._body]);\n    }\n\n    throw new Error('The request body isn\\'t either a blob or an array buffer');\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Creates `Response` instances from provided values.\n *\n * Though this object isn't\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n * add data to a view.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n * ```\n *\n * The Response's interface is inspired by the Response constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n * can be accessed many times. There are other differences in the implementation, but this is the\n * most significant.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nclass Response extends Body {\n  /**\n   * @param {?} responseOptions\n   */\n  constructor(responseOptions) {\n    super();\n    this._body = responseOptions.body;\n    this.status =\n    /** @type {?} */\n    responseOptions.status;\n    this.ok = this.status >= 200 && this.status <= 299;\n    this.statusText = responseOptions.statusText;\n    this.headers = responseOptions.headers;\n    this.type =\n    /** @type {?} */\n    responseOptions.type;\n    this.url =\n    /** @type {?} */\n    responseOptions.url;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  toString() {\n    return `Response with status: ${this.status} ${this.statusText} for URL: ${this.url}`;\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nlet _nextRequestId = 0;\n/** @type {?} */\n\nconst JSONP_HOME = '__ng_jsonp__';\n/** @type {?} */\n\nlet _jsonpConnections = null;\n/**\n * @return {?}\n */\n\nfunction _getJsonpConnections() {\n  /** @type {?} */\n  const w = typeof window == 'object' ? window : {};\n\n  if (_jsonpConnections === null) {\n    _jsonpConnections = w[JSONP_HOME] = {};\n  }\n\n  return _jsonpConnections;\n} // Make sure not to evaluate this in a non-browser environment!\n\n\nclass BrowserJsonp {\n  // Construct a <script> element with the specified URL\n\n  /**\n   * @param {?} url\n   * @return {?}\n   */\n  build(url) {\n    /** @type {?} */\n    const node = document.createElement('script');\n    node.src = url;\n    return node;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  nextRequestID() {\n    return `__req${_nextRequestId++}`;\n  }\n  /**\n   * @param {?} id\n   * @return {?}\n   */\n\n\n  requestCallback(id) {\n    return `${JSONP_HOME}.${id}.finished`;\n  }\n  /**\n   * @param {?} id\n   * @param {?} connection\n   * @return {?}\n   */\n\n\n  exposeConnection(id, connection) {\n    /** @type {?} */\n    const connections = _getJsonpConnections();\n\n    connections[id] = connection;\n  }\n  /**\n   * @param {?} id\n   * @return {?}\n   */\n\n\n  removeConnection(id) {\n    /** @type {?} */\n    const connections = _getJsonpConnections();\n\n    connections[id] = null;\n  } // Attach the <script> element to the DOM\n\n  /**\n   * @param {?} node\n   * @return {?}\n   */\n\n\n  send(node) {\n    document.body.appendChild(\n    /** @type {?} */\n    node);\n  } // Remove <script> element from the DOM\n\n  /**\n   * @param {?} node\n   * @return {?}\n   */\n\n\n  cleanup(node) {\n    if (node.parentNode) {\n      node.parentNode.removeChild(\n      /** @type {?} */\n      node);\n    }\n  }\n\n}\n\nBrowserJsonp.ɵfac = function BrowserJsonp_Factory(t) {\n  return new (t || BrowserJsonp)();\n};\n\nBrowserJsonp.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: BrowserJsonp,\n  factory: BrowserJsonp.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BrowserJsonp, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n/** @type {?} */\n\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n/**\n * Base class for an in-flight JSONP request.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\nclass JSONPConnection {\n  /**\n   * \\@internal\n   * @param {?} req\n   * @param {?} _dom\n   * @param {?=} baseResponseOptions\n   */\n  constructor(req, _dom, baseResponseOptions) {\n    this._dom = _dom;\n    this.baseResponseOptions = baseResponseOptions;\n    this._finished = false;\n\n    if (req.method !== RequestMethod.Get) {\n      throw new TypeError(JSONP_ERR_WRONG_METHOD);\n    }\n\n    this.request = req;\n    this.response = new Observable(responseObserver => {\n      this.readyState = ReadyState.Loading;\n      /** @type {?} */\n\n      const id = this._id = _dom.nextRequestID();\n\n      _dom.exposeConnection(id, this); // Workaround Dart\n      // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n\n      /** @type {?} */\n\n\n      const callback = _dom.requestCallback(this._id);\n      /** @type {?} */\n\n\n      let url = req.url;\n\n      if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n        url = url.replace('=JSONP_CALLBACK&', `=${callback}&`);\n      } else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n        url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + `=${callback}`;\n      }\n      /** @type {?} */\n\n\n      const script = this._script = _dom.build(url);\n      /** @type {?} */\n\n\n      const onLoad = event => {\n        if (this.readyState === ReadyState.Cancelled) return;\n        this.readyState = ReadyState.Done;\n\n        _dom.cleanup(script);\n\n        if (!this._finished) {\n          /** @type {?} */\n          let responseOptions = new ResponseOptions({\n            body: JSONP_ERR_NO_CALLBACK,\n            type: ResponseType.Error,\n            url\n          });\n\n          if (baseResponseOptions) {\n            responseOptions = baseResponseOptions.merge(responseOptions);\n          }\n\n          responseObserver.error(new Response(responseOptions));\n          return;\n        }\n        /** @type {?} */\n\n\n        let responseOptions = new ResponseOptions({\n          body: this._responseData,\n          url\n        });\n\n        if (this.baseResponseOptions) {\n          responseOptions = this.baseResponseOptions.merge(responseOptions);\n        }\n\n        responseObserver.next(new Response(responseOptions));\n        responseObserver.complete();\n      };\n      /** @type {?} */\n\n\n      const onError = error => {\n        if (this.readyState === ReadyState.Cancelled) return;\n        this.readyState = ReadyState.Done;\n\n        _dom.cleanup(script);\n        /** @type {?} */\n\n\n        let responseOptions = new ResponseOptions({\n          body: error.message,\n          type: ResponseType.Error\n        });\n\n        if (baseResponseOptions) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n\n        responseObserver.error(new Response(responseOptions));\n      };\n\n      script.addEventListener('load', onLoad);\n      script.addEventListener('error', onError);\n\n      _dom.send(script);\n\n      return () => {\n        this.readyState = ReadyState.Cancelled;\n        script.removeEventListener('load', onLoad);\n        script.removeEventListener('error', onError);\n\n        this._dom.cleanup(script);\n      };\n    });\n  }\n  /**\n   * Callback called when the JSONP request completes, to notify the application\n   * of the new data.\n   * @param {?=} data\n   * @return {?}\n   */\n\n\n  finished(data) {\n    // Don't leak connections\n    this._finished = true;\n\n    this._dom.removeConnection(this._id);\n\n    if (this.readyState === ReadyState.Cancelled) return;\n    this._responseData = data;\n  }\n\n}\n/**\n * A {\\@link ConnectionBackend} that uses the JSONP strategy of making requests.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nclass JSONPBackend extends ConnectionBackend {\n  /**\n   * \\@internal\n   * @param {?} _browserJSONP\n   * @param {?} _baseResponseOptions\n   */\n  constructor(_browserJSONP, _baseResponseOptions) {\n    super();\n    this._browserJSONP = _browserJSONP;\n    this._baseResponseOptions = _baseResponseOptions;\n  }\n  /**\n   * @param {?} request\n   * @return {?}\n   */\n\n\n  createConnection(request) {\n    return new JSONPConnection(request, this._browserJSONP, this._baseResponseOptions);\n  }\n\n}\n\nJSONPBackend.ɵfac = function JSONPBackend_Factory(t) {\n  return new (t || JSONPBackend)(ɵngcc0.ɵɵinject(BrowserJsonp), ɵngcc0.ɵɵinject(ResponseOptions));\n};\n\nJSONPBackend.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: JSONPBackend,\n  factory: JSONPBackend.ɵfac\n});\n/** @nocollapse */\n\nJSONPBackend.ctorParameters = () => [{\n  type: BrowserJsonp\n}, {\n  type: ResponseOptions\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JSONPBackend, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: BrowserJsonp\n    }, {\n      type: ResponseOptions\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n *\n * This class would typically not be created or interacted with directly inside applications, though\n * the {\\@link MockConnection} may be interacted with in tests.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\nclass XHRConnection {\n  /**\n   * @param {?} req\n   * @param {?} browserXHR\n   * @param {?=} baseResponseOptions\n   */\n  constructor(req, browserXHR, baseResponseOptions) {\n    this.request = req;\n    this.response = new Observable(responseObserver => {\n      /** @type {?} */\n      const _xhr = browserXHR.build();\n\n      _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n\n      if (req.withCredentials != null) {\n        _xhr.withCredentials = req.withCredentials;\n      } // load event handler\n\n      /** @type {?} */\n\n\n      const onLoad = () => {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n\n        /** @type {?} */\n        let status = _xhr.status === 1223 ? 204 : _xhr.status;\n        /** @type {?} */\n\n        let body = null; // HTTP 204 means no content\n\n        if (status !== 204) {\n          // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n          // response/responseType properties were introduced in ResourceLoader Level2 spec\n          // (supported by IE10)\n          body = typeof _xhr.response === 'undefined' ? _xhr.responseText : _xhr.response; // Implicitly strip a potential XSSI prefix.\n\n          if (typeof body === 'string') {\n            body = body.replace(XSSI_PREFIX, '');\n          }\n        } // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n\n\n        if (status === 0) {\n          status = body ? 200 : 0;\n        }\n        /** @type {?} */\n\n\n        const headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders()); // IE 9 does not provide the way to get URL of response\n\n        /** @type {?} */\n\n        const url = getResponseURL(_xhr) || req.url;\n        /** @type {?} */\n\n        const statusText = _xhr.statusText || 'OK';\n        /** @type {?} */\n\n        let responseOptions = new ResponseOptions({\n          body,\n          status,\n          headers,\n          statusText,\n          url\n        });\n\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        /** @type {?} */\n\n\n        const response = new Response(responseOptions);\n        response.ok = isSuccess(status);\n\n        if (response.ok) {\n          responseObserver.next(response); // TODO(gdi2290): defer complete if array buffer until done\n\n          responseObserver.complete();\n          return;\n        }\n\n        responseObserver.error(response);\n      }; // error event handler\n\n      /** @type {?} */\n\n\n      const onError = err => {\n        /** @type {?} */\n        let responseOptions = new ResponseOptions({\n          body: err,\n          type: ResponseType.Error,\n          status: _xhr.status,\n          statusText: _xhr.statusText\n        });\n\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n\n        responseObserver.error(new Response(responseOptions));\n      };\n\n      this.setDetectedContentType(req, _xhr);\n\n      if (req.headers == null) {\n        req.headers = new Headers();\n      }\n\n      if (!req.headers.has('Accept')) {\n        req.headers.append('Accept', 'application/json, text/plain, */*');\n      }\n\n      req.headers.forEach((values, name) => _xhr.setRequestHeader(\n      /** @type {?} */\n      name, values.join(','))); // Select the correct buffer type to store the response\n\n      if (req.responseType != null && _xhr.responseType != null) {\n        switch (req.responseType) {\n          case ResponseContentType.ArrayBuffer:\n            _xhr.responseType = 'arraybuffer';\n            break;\n\n          case ResponseContentType.Json:\n            _xhr.responseType = 'json';\n            break;\n\n          case ResponseContentType.Text:\n            _xhr.responseType = 'text';\n            break;\n\n          case ResponseContentType.Blob:\n            _xhr.responseType = 'blob';\n            break;\n\n          default:\n            throw new Error('The selected responseType is not supported');\n        }\n      }\n\n      _xhr.addEventListener('load', onLoad);\n\n      _xhr.addEventListener('error', onError);\n\n      _xhr.send(this.request.getBody());\n\n      return () => {\n        _xhr.removeEventListener('load', onLoad);\n\n        _xhr.removeEventListener('error', onError);\n\n        _xhr.abort();\n      };\n    });\n  }\n  /**\n   * @param {?} req\n   * @param {?} _xhr\n   * @return {?}\n   */\n\n\n  setDetectedContentType(req\n  /** TODO Request */\n  , _xhr\n  /** XMLHttpRequest */\n  ) {\n    // Skip if a custom Content-Type header is provided\n    if (req.headers != null && req.headers.get('Content-Type') != null) {\n      return;\n    } // Set the detected content type\n\n\n    switch (req.contentType) {\n      case ContentType.NONE:\n        break;\n\n      case ContentType.JSON:\n        _xhr.setRequestHeader('content-type', 'application/json');\n\n        break;\n\n      case ContentType.FORM:\n        _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n\n        break;\n\n      case ContentType.TEXT:\n        _xhr.setRequestHeader('content-type', 'text/plain');\n\n        break;\n\n      case ContentType.BLOB:\n        /** @type {?} */\n        const blob = req.blob();\n\n        if (blob.type) {\n          _xhr.setRequestHeader('content-type', blob.type);\n        }\n\n        break;\n    }\n  }\n\n}\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n *\n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nclass CookieXSRFStrategy {\n  /**\n   * @param {?=} _cookieName\n   * @param {?=} _headerName\n   */\n  constructor(_cookieName = 'XSRF-TOKEN', _headerName = 'X-XSRF-TOKEN') {\n    this._cookieName = _cookieName;\n    this._headerName = _headerName;\n  }\n  /**\n   * @param {?} req\n   * @return {?}\n   */\n\n\n  configureRequest(req) {\n    /** @type {?} */\n    const xsrfToken = ɵgetDOM().getCookie(this._cookieName);\n\n    if (xsrfToken) {\n      req.headers.set(this._headerName, xsrfToken);\n    }\n  }\n\n}\n/**\n * Creates {\\@link XHRConnection} instances.\n *\n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\\@angular/http';\n * \\@Component({\n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nclass XHRBackend {\n  /**\n   * @param {?} _browserXHR\n   * @param {?} _baseResponseOptions\n   * @param {?} _xsrfStrategy\n   */\n  constructor(_browserXHR, _baseResponseOptions, _xsrfStrategy) {\n    this._browserXHR = _browserXHR;\n    this._baseResponseOptions = _baseResponseOptions;\n    this._xsrfStrategy = _xsrfStrategy;\n  }\n  /**\n   * @param {?} request\n   * @return {?}\n   */\n\n\n  createConnection(request) {\n    this._xsrfStrategy.configureRequest(request);\n\n    return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n  }\n\n}\n\nXHRBackend.ɵfac = function XHRBackend_Factory(t) {\n  return new (t || XHRBackend)(ɵngcc0.ɵɵinject(BrowserXhr), ɵngcc0.ɵɵinject(ResponseOptions), ɵngcc0.ɵɵinject(XSRFStrategy));\n};\n\nXHRBackend.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: XHRBackend,\n  factory: XHRBackend.ɵfac\n});\n/** @nocollapse */\n\nXHRBackend.ctorParameters = () => [{\n  type: BrowserXhr\n}, {\n  type: ResponseOptions\n}, {\n  type: XSRFStrategy\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(XHRBackend, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: BrowserXhr\n    }, {\n      type: ResponseOptions\n    }, {\n      type: XSRFStrategy\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {\\@link Request}.\n *\n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n *\n * All values are null by default. Typical defaults can be found in the {\\@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n *\n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * const req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nclass RequestOptions {\n  /**\n   * @deprecated from 4.0.0. Use params instead.\n   * @return {?}\n   */\n  get search() {\n    return this.params;\n  }\n  /**\n   * @deprecated from 4.0.0. Use params instead.\n   * @param {?} params\n   * @return {?}\n   */\n\n\n  set search(params) {\n    this.params = params;\n  } // TODO(Dzmitry): remove search when this.search is removed\n\n  /**\n   * @param {?=} opts\n   */\n\n\n  constructor(opts = {}) {\n    const {\n      method,\n      headers,\n      body,\n      url,\n      search,\n      params,\n      withCredentials,\n      responseType\n    } = opts;\n    this.method = method != null ? normalizeMethodName(method) : null;\n    this.headers = headers != null ? headers : null;\n    this.body = body != null ? body : null;\n    this.url = url != null ? url : null;\n    this.params = this._mergeSearchParams(params || search);\n    this.withCredentials = withCredentials != null ? withCredentials : null;\n    this.responseType = responseType != null ? responseType : null;\n  }\n  /**\n   * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n   * existing values. This method will not change the values of the instance on which it is being\n   * called.\n   *\n   * Note that `headers` and `search` will override existing values completely if present in\n   * the `options` object. If these values should be merged, it should be done prior to calling\n   * `merge` on the `RequestOptions` instance.\n   *\n   * ```typescript\n   * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n   *\n   * const options = new RequestOptions({\n   *   method: RequestMethod.Post\n   * });\n   * const req = new Request(options.merge({\n   *   url: 'https://google.com'\n   * }));\n   * console.log('req.method:', RequestMethod[req.method]); // Post\n   * console.log('options.url:', options.url); // null\n   * console.log('req.url:', req.url); // https://google.com\n   * ```\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  merge(options) {\n    return new RequestOptions({\n      method: options && options.method != null ? options.method : this.method,\n      headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n      body: options && options.body != null ? options.body : this.body,\n      url: options && options.url != null ? options.url : this.url,\n      params: options && this._mergeSearchParams(options.params || options.search),\n      withCredentials: options && options.withCredentials != null ? options.withCredentials : this.withCredentials,\n      responseType: options && options.responseType != null ? options.responseType : this.responseType\n    });\n  }\n  /**\n   * @private\n   * @param {?=} params\n   * @return {?}\n   */\n\n\n  _mergeSearchParams(params) {\n    if (!params) return this.params;\n\n    if (params instanceof URLSearchParams) {\n      return params.clone();\n    }\n\n    if (typeof params === 'string') {\n      return new URLSearchParams(params);\n    }\n\n    return this._parseParams(params);\n  }\n  /**\n   * @private\n   * @param {?=} objParams\n   * @return {?}\n   */\n\n\n  _parseParams(objParams = {}) {\n    /** @type {?} */\n    const params = new URLSearchParams();\n    Object.keys(objParams).forEach(key => {\n      /** @type {?} */\n      const value = objParams[key];\n\n      if (Array.isArray(value)) {\n        value.forEach(item => this._appendParam(key, item, params));\n      } else {\n        this._appendParam(key, value, params);\n      }\n    });\n    return params;\n  }\n  /**\n   * @private\n   * @param {?} key\n   * @param {?} value\n   * @param {?} params\n   * @return {?}\n   */\n\n\n  _appendParam(key, value, params) {\n    if (typeof value !== 'string') {\n      value = JSON.stringify(value);\n    }\n\n    params.append(key, value);\n  }\n\n}\n/**\n * Subclass of {\\@link RequestOptions}, with default values.\n *\n * Default values:\n *  * method: {\\@link RequestMethod RequestMethod.Get}\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link RequestOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create and send {\\@link Request Requests}.\n *\n * ```typescript\n * import {BaseRequestOptions, RequestOptions} from '\\@angular/http';\n *\n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n *\n * {provide: RequestOptions, useClass: MyOptions};\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Request}\n * object.\n *\n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new BaseRequestOptions();\n * const req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nclass BaseRequestOptions extends RequestOptions {\n  constructor() {\n    super({\n      method: RequestMethod.Get,\n      headers: new Headers()\n    });\n  }\n\n}\n\nBaseRequestOptions.ɵfac = function BaseRequestOptions_Factory(t) {\n  return new (t || BaseRequestOptions)();\n};\n\nBaseRequestOptions.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: BaseRequestOptions,\n  factory: BaseRequestOptions.ɵfac\n});\n/** @nocollapse */\n\nBaseRequestOptions.ctorParameters = () => [];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BaseRequestOptions, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO(jeffbcross): properly implement body accessors\n\n/**\n * Creates `Request` instances from provided values.\n *\n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n *\n * `Request` instances are typically created by higher-level classes, like {\\@link Http} and\n * {\\@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {\\@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n *\n * ```typescript\n * import {Injectable, Injector} from '\\@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '\\@angular/http';\n *\n * \\@Injectable()\n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nclass Request extends Body {\n  /**\n   * @param {?} requestOptions\n   */\n  constructor(requestOptions) {\n    super(); // TODO: assert that url is present\n\n    /** @type {?} */\n\n    const url = requestOptions.url;\n    this.url =\n    /** @type {?} */\n    requestOptions.url;\n    /** @type {?} */\n\n    const paramsArg = requestOptions.params || requestOptions.search;\n\n    if (paramsArg) {\n      /** @type {?} */\n      let params;\n\n      if (typeof paramsArg === 'object' && !(paramsArg instanceof URLSearchParams)) {\n        params = urlEncodeParams(paramsArg).toString();\n      } else {\n        params = paramsArg.toString();\n      }\n\n      if (params.length > 0) {\n        /** @type {?} */\n        let prefix = '?';\n\n        if (this.url.indexOf('?') != -1) {\n          prefix = this.url[this.url.length - 1] == '&' ? '' : '&';\n        } // TODO: just delete search-query-looking string in url?\n\n\n        this.url = url + prefix + params;\n      }\n    }\n\n    this._body = requestOptions.body;\n    this.method = normalizeMethodName(\n    /** @type {?} */\n    requestOptions.method); // TODO(jeffbcross): implement behavior\n    // Defaults to 'omit', consistent with browser\n\n    this.headers = new Headers(requestOptions.headers);\n    this.contentType = this.detectContentType();\n    this.withCredentials =\n    /** @type {?} */\n    requestOptions.withCredentials;\n    this.responseType =\n    /** @type {?} */\n    requestOptions.responseType;\n  }\n  /**\n   * Returns the content type enum based on header options.\n   * @return {?}\n   */\n\n\n  detectContentType() {\n    switch (this.headers.get('content-type')) {\n      case 'application/json':\n        return ContentType.JSON;\n\n      case 'application/x-www-form-urlencoded':\n        return ContentType.FORM;\n\n      case 'multipart/form-data':\n        return ContentType.FORM_DATA;\n\n      case 'text/plain':\n      case 'text/html':\n        return ContentType.TEXT;\n\n      case 'application/octet-stream':\n        return this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n\n      default:\n        return this.detectContentTypeFromBody();\n    }\n  }\n  /**\n   * Returns the content type of request's body based on its type.\n   * @return {?}\n   */\n\n\n  detectContentTypeFromBody() {\n    if (this._body == null) {\n      return ContentType.NONE;\n    } else if (this._body instanceof URLSearchParams) {\n      return ContentType.FORM;\n    } else if (this._body instanceof FormData) {\n      return ContentType.FORM_DATA;\n    } else if (this._body instanceof Blob$1) {\n      return ContentType.BLOB;\n    } else if (this._body instanceof ArrayBuffer$1) {\n      return ContentType.ARRAY_BUFFER;\n    } else if (this._body && typeof this._body === 'object') {\n      return ContentType.JSON;\n    } else {\n      return ContentType.TEXT;\n    }\n  }\n  /**\n   * Returns the request's body according to its type. If body is undefined, return\n   * null.\n   * @return {?}\n   */\n\n\n  getBody() {\n    switch (this.contentType) {\n      case ContentType.JSON:\n        return this.text();\n\n      case ContentType.FORM:\n        return this.text();\n\n      case ContentType.FORM_DATA:\n        return this._body;\n\n      case ContentType.TEXT:\n        return this.text();\n\n      case ContentType.BLOB:\n        return this.blob();\n\n      case ContentType.ARRAY_BUFFER:\n        return this.arrayBuffer();\n\n      default:\n        return null;\n    }\n  }\n\n}\n/**\n * @param {?} params\n * @return {?}\n */\n\n\nfunction urlEncodeParams(params) {\n  /** @type {?} */\n  const searchParams = new URLSearchParams();\n  Object.keys(params).forEach(key => {\n    /** @type {?} */\n    const value = params[key];\n\n    if (value && Array.isArray(value)) {\n      value.forEach(element => searchParams.append(key, element.toString()));\n    } else {\n      searchParams.append(key, value.toString());\n    }\n  });\n  return searchParams;\n}\n/** @type {?} */\n\n\nconst noop = function () {};\n/** @type {?} */\n\n\nconst w = typeof window == 'object' ? window : noop;\n/** @type {?} */\n\nconst FormData =\n/** @type {?} */\nw['FormData'] || noop;\n/** @type {?} */\n\nconst Blob$1 =\n/** @type {?} */\nw['Blob'] || noop;\n/** @type {?} */\n\nconst ArrayBuffer$1 =\n/** @type {?} */\nw['ArrayBuffer'] || noop;\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @param {?} backend\n * @param {?} request\n * @return {?}\n */\n\nfunction httpRequest(backend, request) {\n  return backend.createConnection(request).response;\n}\n/**\n * @param {?} defaultOpts\n * @param {?} providedOpts\n * @param {?} method\n * @param {?} url\n * @return {?}\n */\n\n\nfunction mergeOptions(defaultOpts, providedOpts, method, url) {\n  /** @type {?} */\n  const newOptions = defaultOpts;\n\n  if (providedOpts) {\n    // Hack so Dart can used named parameters\n    return (\n      /** @type {?} */\n      newOptions.merge(new RequestOptions({\n        method: providedOpts.method || method,\n        url: providedOpts.url || url,\n        search: providedOpts.search,\n        params: providedOpts.params,\n        headers: providedOpts.headers,\n        body: providedOpts.body,\n        withCredentials: providedOpts.withCredentials,\n        responseType: providedOpts.responseType\n      }))\n    );\n  }\n\n  return (\n    /** @type {?} */\n    newOptions.merge(new RequestOptions({\n      method,\n      url\n    }))\n  );\n}\n/**\n * Performs http requests using `XMLHttpRequest` as the default backend.\n *\n * `Http` is available as an injectable class, with methods to perform http requests. Calling\n * `request` returns an `Observable` which will emit a single {\\@link Response} when a\n * response is received.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import {Http, HTTP_PROVIDERS} from '\\@angular/http';\n * import {map} from 'rxjs/operators';\n *\n * \\@Component({\n *   selector: 'http-app',\n *   viewProviders: [HTTP_PROVIDERS],\n *   templateUrl: 'people.html'\n * })\n * class PeopleComponent {\n *   constructor(http: Http) {\n *     http.get('people.json')\n *       // Call map on the response observable to get the parsed people object\n *       .pipe(map(res => res.json()))\n *       // Subscribe to the observable to get the parsed people object and attach it to the\n *       // component\n *       .subscribe(people => this.people = people);\n *   }\n * }\n * ```\n *\n *\n * ### Example\n *\n * ```\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n * ```\n *\n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n * {\\@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n * the {\\@link XHRBackend} provider, as in the following example:\n *\n * ### Example\n *\n * ```typescript\n * import {BaseRequestOptions, Http} from '\\@angular/http';\n * import {MockBackend} from '\\@angular/http/testing';\n * var injector = Injector.resolveAndCreate([\n *   BaseRequestOptions,\n *   MockBackend,\n *   {provide: Http, useFactory:\n *       function(backend, defaultOptions) {\n *         return new Http(backend, defaultOptions);\n *       },\n *       deps: [MockBackend, BaseRequestOptions]}\n * ]);\n * var http = injector.get(Http);\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nclass Http {\n  /**\n   * @param {?} _backend\n   * @param {?} _defaultOptions\n   */\n  constructor(_backend, _defaultOptions) {\n    this._backend = _backend;\n    this._defaultOptions = _defaultOptions;\n  }\n  /**\n   * Performs any type of http request. First argument is required, and can either be a url or\n   * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n   * object can be provided as the 2nd argument. The options object will be merged with the values\n   * of {\\@link BaseRequestOptions} before performing the request.\n   * @param {?} url\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  request(url, options) {\n    /** @type {?} */\n    let responseObservable;\n\n    if (typeof url === 'string') {\n      responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get,\n      /** @type {?} */\n      url)));\n    } else if (url instanceof Request) {\n      responseObservable = httpRequest(this._backend, url);\n    } else {\n      throw new Error('First argument must be a url string or Request instance.');\n    }\n\n    return responseObservable;\n  }\n  /**\n   * Performs a request with `get` http method.\n   * @param {?} url\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  get(url, options) {\n    return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n  }\n  /**\n   * Performs a request with `post` http method.\n   * @param {?} url\n   * @param {?} body\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  post(url, body, options) {\n    return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({\n      body: body\n    })), options, RequestMethod.Post, url)));\n  }\n  /**\n   * Performs a request with `put` http method.\n   * @param {?} url\n   * @param {?} body\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  put(url, body, options) {\n    return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({\n      body: body\n    })), options, RequestMethod.Put, url)));\n  }\n  /**\n   * Performs a request with `delete` http method.\n   * @param {?} url\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  delete(url, options) {\n    return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n  }\n  /**\n   * Performs a request with `patch` http method.\n   * @param {?} url\n   * @param {?} body\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  patch(url, body, options) {\n    return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({\n      body: body\n    })), options, RequestMethod.Patch, url)));\n  }\n  /**\n   * Performs a request with `head` http method.\n   * @param {?} url\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  head(url, options) {\n    return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n  }\n  /**\n   * Performs a request with `options` http method.\n   * @param {?} url\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  options(url, options) {\n    return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));\n  }\n\n}\n\nHttp.ɵfac = function Http_Factory(t) {\n  return new (t || Http)(ɵngcc0.ɵɵinject(ConnectionBackend), ɵngcc0.ɵɵinject(RequestOptions));\n};\n\nHttp.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: Http,\n  factory: Http.ɵfac\n});\n/** @nocollapse */\n\nHttp.ctorParameters = () => [{\n  type: ConnectionBackend\n}, {\n  type: RequestOptions\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Http, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ConnectionBackend\n    }, {\n      type: RequestOptions\n    }];\n  }, null);\n})();\n/**\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nclass Jsonp extends Http {\n  /**\n   * @param {?} backend\n   * @param {?} defaultOptions\n   */\n  constructor(backend, defaultOptions) {\n    super(backend, defaultOptions);\n  }\n  /**\n   * Performs any type of http request. First argument is required, and can either be a url or\n   * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n   * object can be provided as the 2nd argument. The options object will be merged with the values\n   * of {\\@link BaseRequestOptions} before performing the request.\n   *\n   * \\@security Regular XHR is the safest alternative to JSONP for most applications, and is\n   * supported by all current browsers. Because JSONP creates a `<script>` element with\n   * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n   * source could expose your application to XSS risks. Data exposed by JSONP may also be\n   * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n   * future security issues (e.g. content sniffing).  For more detail, see the\n   * [Security Guide](http://g.co/ng/security).\n   * @param {?} url\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  request(url, options) {\n    /** @type {?} */\n    let responseObservable;\n\n    if (typeof url === 'string') {\n      url = new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get,\n      /** @type {?} */\n      url));\n    }\n\n    if (url instanceof Request) {\n      if (url.method !== RequestMethod.Get) {\n        throw new Error('JSONP requests must use GET request method.');\n      }\n\n      responseObservable = httpRequest(this._backend, url);\n    } else {\n      throw new Error('First argument must be a url string or Request instance.');\n    }\n\n    return responseObservable;\n  }\n\n}\n\nJsonp.ɵfac = function Jsonp_Factory(t) {\n  return new (t || Jsonp)(ɵngcc0.ɵɵinject(ConnectionBackend), ɵngcc0.ɵɵinject(RequestOptions));\n};\n\nJsonp.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: Jsonp,\n  factory: Jsonp.ɵfac\n});\n/** @nocollapse */\n\nJsonp.ctorParameters = () => [{\n  type: ConnectionBackend\n}, {\n  type: RequestOptions\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Jsonp, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ConnectionBackend\n    }, {\n      type: RequestOptions\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @return {?}\n */\n\n\nfunction _createDefaultCookieXSRFStrategy() {\n  return new CookieXSRFStrategy();\n}\n/**\n * @param {?} xhrBackend\n * @param {?} requestOptions\n * @return {?}\n */\n\n\nfunction httpFactory(xhrBackend, requestOptions) {\n  return new Http(xhrBackend, requestOptions);\n}\n/**\n * @param {?} jsonpBackend\n * @param {?} requestOptions\n * @return {?}\n */\n\n\nfunction jsonpFactory(jsonpBackend, requestOptions) {\n  return new Jsonp(jsonpBackend, requestOptions);\n}\n/**\n * The module that includes http's providers\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nclass HttpModule {}\n\nHttpModule.ɵfac = function HttpModule_Factory(t) {\n  return new (t || HttpModule)();\n};\n\nHttpModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: HttpModule\n});\nHttpModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [// TODO(pascal): use factory type annotations once supported in DI\n  // issue: https://github.com/angular/angular/issues/3183\n  {\n    provide: Http,\n    useFactory: httpFactory,\n    deps: [XHRBackend, RequestOptions]\n  }, BrowserXhr, {\n    provide: RequestOptions,\n    useClass: BaseRequestOptions\n  }, {\n    provide: ResponseOptions,\n    useClass: BaseResponseOptions\n  }, XHRBackend, {\n    provide: XSRFStrategy,\n    useFactory: _createDefaultCookieXSRFStrategy\n  }]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpModule, [{\n    type: NgModule,\n    args: [{\n      providers: [// TODO(pascal): use factory type annotations once supported in DI\n      // issue: https://github.com/angular/angular/issues/3183\n      {\n        provide: Http,\n        useFactory: httpFactory,\n        deps: [XHRBackend, RequestOptions]\n      }, BrowserXhr, {\n        provide: RequestOptions,\n        useClass: BaseRequestOptions\n      }, {\n        provide: ResponseOptions,\n        useClass: BaseResponseOptions\n      }, XHRBackend, {\n        provide: XSRFStrategy,\n        useFactory: _createDefaultCookieXSRFStrategy\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * The module that includes jsonp's providers\n *\n * @deprecated see https://angular.io/api/common/http/HttpClient#jsonp\n * \\@publicApi\n */\n\n\nclass JsonpModule {}\n\nJsonpModule.ɵfac = function JsonpModule_Factory(t) {\n  return new (t || JsonpModule)();\n};\n\nJsonpModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: JsonpModule\n});\nJsonpModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [// TODO(pascal): use factory type annotations once supported in DI\n  // issue: https://github.com/angular/angular/issues/3183\n  {\n    provide: Jsonp,\n    useFactory: jsonpFactory,\n    deps: [JSONPBackend, RequestOptions]\n  }, BrowserJsonp, {\n    provide: RequestOptions,\n    useClass: BaseRequestOptions\n  }, {\n    provide: ResponseOptions,\n    useClass: BaseResponseOptions\n  }, JSONPBackend]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JsonpModule, [{\n    type: NgModule,\n    args: [{\n      providers: [// TODO(pascal): use factory type annotations once supported in DI\n      // issue: https://github.com/angular/angular/issues/3183\n      {\n        provide: Jsonp,\n        useFactory: jsonpFactory,\n        deps: [JSONPBackend, RequestOptions]\n      }, BrowserJsonp, {\n        provide: RequestOptions,\n        useClass: BaseRequestOptions\n      }, {\n        provide: ResponseOptions,\n        useClass: BaseResponseOptions\n      }, JSONPBackend]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n * @type {?}\n */\n\n\nconst VERSION = new Version('7.2.16');\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BrowserJsonp as ɵangular_packages_http_http_e, Body as ɵangular_packages_http_http_f, _createDefaultCookieXSRFStrategy as ɵangular_packages_http_http_a, httpFactory as ɵangular_packages_http_http_b, jsonpFactory as ɵangular_packages_http_http_c, BrowserXhr, JSONPBackend, JSONPConnection, CookieXSRFStrategy, XHRBackend, XHRConnection, BaseRequestOptions, RequestOptions, BaseResponseOptions, ResponseOptions, ReadyState, RequestMethod, ResponseContentType, ResponseType, Headers, Http, Jsonp, HttpModule, JsonpModule, Connection, ConnectionBackend, XSRFStrategy, Request, Response, QueryEncoder, URLSearchParams, VERSION };","map":{"version":3,"names":["Injectable","NgModule","Version","Observable","ɵgetDOM","ɵngcc0","BrowserXhr","constructor","build","XMLHttpRequest","ɵfac","BrowserXhr_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","ctorParameters","ngDevMode","ɵsetClassMetadata","type","RequestMethod","Get","Post","Put","Delete","Options","Head","Patch","ReadyState","Unsent","Open","HeadersReceived","Loading","Done","Cancelled","ResponseType","Basic","Cors","Default","Error","Opaque","ContentType","NONE","JSON","FORM","FORM_DATA","TEXT","BLOB","ARRAY_BUFFER","ResponseContentType","Text","Json","ArrayBuffer","Blob","Headers","headers","_headers","Map","_normalizedNames","forEach","values","name","value","append","Object","keys","Array","isArray","delete","fromResponseHeaderString","headersString","split","line","index","indexOf","slice","trim","set","getAll","push","lcName","toLowerCase","fn","get","length","has","from","join","mayBeSetNormalizedName","toJSON","serialized","v","entries","ResponseOptions","opts","body","status","statusText","url","merge","options","BaseResponseOptions","BaseResponseOptions_Factory","ConnectionBackend","Connection","XSRFStrategy","normalizeMethodName","method","toUpperCase","isSuccess","getResponseURL","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","stringToArrayBuffer","input","view","Uint16Array","i","strLen","charCodeAt","buffer","paramParser","rawParams","map","params","param","eqIdx","key","val","list","QueryEncoder","encodeKey","standardEncoding","encodeValue","encodeURIComponent","replace","URLSearchParams","queryEncoder","paramsMap","clone","appendAll","storedParam","setAll","searchParams","replaceAll","toString","paramsList","k","Body","json","_body","parse","text","encodingHint","String","fromCharCode","apply","Uint8Array","stringify","arrayBuffer","blob","Response","responseOptions","ok","_nextRequestId","JSONP_HOME","_jsonpConnections","_getJsonpConnections","w","window","BrowserJsonp","node","document","createElement","src","nextRequestID","requestCallback","id","exposeConnection","connection","connections","removeConnection","send","appendChild","cleanup","parentNode","removeChild","BrowserJsonp_Factory","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONPConnection","req","_dom","baseResponseOptions","_finished","TypeError","request","response","responseObserver","readyState","_id","callback","lastIndexOf","substring","script","_script","onLoad","event","error","_responseData","next","complete","onError","message","addEventListener","removeEventListener","finished","data","JSONPBackend","_browserJSONP","_baseResponseOptions","createConnection","JSONPBackend_Factory","ɵɵinject","XSSI_PREFIX","XHRConnection","browserXHR","_xhr","open","withCredentials","responseText","err","setDetectedContentType","setRequestHeader","responseType","getBody","abort","contentType","CookieXSRFStrategy","_cookieName","_headerName","configureRequest","xsrfToken","getCookie","XHRBackend","_browserXHR","_xsrfStrategy","XHRBackend_Factory","RequestOptions","search","_mergeSearchParams","_parseParams","objParams","item","_appendParam","BaseRequestOptions","BaseRequestOptions_Factory","Request","requestOptions","paramsArg","urlEncodeParams","prefix","detectContentType","ArrayBuffer$1","detectContentTypeFromBody","FormData","Blob$1","element","noop","httpRequest","backend","mergeOptions","defaultOpts","providedOpts","newOptions","Http","_backend","_defaultOptions","responseObservable","post","put","patch","head","Http_Factory","Jsonp","defaultOptions","Jsonp_Factory","_createDefaultCookieXSRFStrategy","httpFactory","xhrBackend","jsonpFactory","jsonpBackend","HttpModule","HttpModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","provide","useFactory","deps","useClass","args","JsonpModule","JsonpModule_Factory","VERSION","ɵangular_packages_http_http_e","ɵangular_packages_http_http_f","ɵangular_packages_http_http_a","ɵangular_packages_http_http_b","ɵangular_packages_http_http_c"],"sources":["F:/AngularProj/HospitalManagementSystenm/node_modules/@angular/http/__ivy_ngcc__/fesm2015/http.js"],"sourcesContent":["/**\n * @license Angular v7.2.16\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { Injectable, NgModule, Version } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ɵgetDOM } from '@angular/platform-browser';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A backend for http that uses the `XMLHttpRequest` browser API.\n *\n * Take care not to evaluate this in non-browser contexts.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nimport * as ɵngcc0 from '@angular/core';\nclass BrowserXhr {\n    constructor() { }\n    /**\n     * @return {?}\n     */\n    build() { return (/** @type {?} */ ((new XMLHttpRequest()))); }\n}\nBrowserXhr.ɵfac = function BrowserXhr_Factory(t) { return new (t || BrowserXhr)(); };\nBrowserXhr.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: BrowserXhr, factory: BrowserXhr.ɵfac });\n/** @nocollapse */\nBrowserXhr.ctorParameters = () => [];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BrowserXhr, [{\n        type: Injectable\n    }], function () { return []; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nconst RequestMethod = {\n    Get: 0,\n    Post: 1,\n    Put: 2,\n    Delete: 3,\n    Options: 4,\n    Head: 5,\n    Patch: 6,\n};\nRequestMethod[RequestMethod.Get] = 'Get';\nRequestMethod[RequestMethod.Post] = 'Post';\nRequestMethod[RequestMethod.Put] = 'Put';\nRequestMethod[RequestMethod.Delete] = 'Delete';\nRequestMethod[RequestMethod.Options] = 'Options';\nRequestMethod[RequestMethod.Head] = 'Head';\nRequestMethod[RequestMethod.Patch] = 'Patch';\n/** @enum {number} */\nconst ReadyState = {\n    Unsent: 0,\n    Open: 1,\n    HeadersReceived: 2,\n    Loading: 3,\n    Done: 4,\n    Cancelled: 5,\n};\nReadyState[ReadyState.Unsent] = 'Unsent';\nReadyState[ReadyState.Open] = 'Open';\nReadyState[ReadyState.HeadersReceived] = 'HeadersReceived';\nReadyState[ReadyState.Loading] = 'Loading';\nReadyState[ReadyState.Done] = 'Done';\nReadyState[ReadyState.Cancelled] = 'Cancelled';\n/** @enum {number} */\nconst ResponseType = {\n    Basic: 0,\n    Cors: 1,\n    Default: 2,\n    Error: 3,\n    Opaque: 4,\n};\nResponseType[ResponseType.Basic] = 'Basic';\nResponseType[ResponseType.Cors] = 'Cors';\nResponseType[ResponseType.Default] = 'Default';\nResponseType[ResponseType.Error] = 'Error';\nResponseType[ResponseType.Opaque] = 'Opaque';\n/** @enum {number} */\nconst ContentType = {\n    NONE: 0,\n    JSON: 1,\n    FORM: 2,\n    FORM_DATA: 3,\n    TEXT: 4,\n    BLOB: 5,\n    ARRAY_BUFFER: 6,\n};\nContentType[ContentType.NONE] = 'NONE';\nContentType[ContentType.JSON] = 'JSON';\nContentType[ContentType.FORM] = 'FORM';\nContentType[ContentType.FORM_DATA] = 'FORM_DATA';\nContentType[ContentType.TEXT] = 'TEXT';\nContentType[ContentType.BLOB] = 'BLOB';\nContentType[ContentType.ARRAY_BUFFER] = 'ARRAY_BUFFER';\n/** @enum {number} */\nconst ResponseContentType = {\n    Text: 0,\n    Json: 1,\n    ArrayBuffer: 2,\n    Blob: 3,\n};\nResponseContentType[ResponseContentType.Text] = 'Text';\nResponseContentType[ResponseContentType.Json] = 'Json';\nResponseContentType[ResponseContentType.ArrayBuffer] = 'ArrayBuffer';\nResponseContentType[ResponseContentType.Blob] = 'Blob';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n *\n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * import {Headers} from '\\@angular/http';\n *\n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n *\n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n *\n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass Headers {\n    // TODO(vicb): any -> string|string[]\n    /**\n     * @param {?=} headers\n     */\n    constructor(headers) {\n        /**\n         * \\@internal header names are lower case\n         */\n        this._headers = new Map();\n        /**\n         * \\@internal map lower case names to actual names\n         */\n        this._normalizedNames = new Map();\n        if (!headers) {\n            return;\n        }\n        if (headers instanceof Headers) {\n            headers.forEach((values, name) => {\n                values.forEach(value => this.append(name, value));\n            });\n            return;\n        }\n        Object.keys(headers).forEach((name) => {\n            /** @type {?} */\n            const values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n            this.delete(name);\n            values.forEach(value => this.append(name, value));\n        });\n    }\n    /**\n     * Returns a new Headers instance from the given DOMString of Response Headers\n     * @param {?} headersString\n     * @return {?}\n     */\n    static fromResponseHeaderString(headersString) {\n        /** @type {?} */\n        const headers = new Headers();\n        headersString.split('\\n').forEach(line => {\n            /** @type {?} */\n            const index = line.indexOf(':');\n            if (index > 0) {\n                /** @type {?} */\n                const name = line.slice(0, index);\n                /** @type {?} */\n                const value = line.slice(index + 1).trim();\n                headers.set(name, value);\n            }\n        });\n        return headers;\n    }\n    /**\n     * Appends a header to existing list of header values for a given header name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    append(name, value) {\n        /** @type {?} */\n        const values = this.getAll(name);\n        if (values === null) {\n            this.set(name, value);\n        }\n        else {\n            values.push(value);\n        }\n    }\n    /**\n     * Deletes all header values for the given name.\n     * @param {?} name\n     * @return {?}\n     */\n    delete(name) {\n        /** @type {?} */\n        const lcName = name.toLowerCase();\n        this._normalizedNames.delete(lcName);\n        this._headers.delete(lcName);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEach(fn) {\n        this._headers.forEach((values, lcName) => fn(values, this._normalizedNames.get(lcName), this._headers));\n    }\n    /**\n     * Returns first header that matches given name.\n     * @param {?} name\n     * @return {?}\n     */\n    get(name) {\n        /** @type {?} */\n        const values = this.getAll(name);\n        if (values === null) {\n            return null;\n        }\n        return values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Checks for existence of header by given name.\n     * @param {?} name\n     * @return {?}\n     */\n    has(name) { return this._headers.has(name.toLowerCase()); }\n    /**\n     * Returns the names of the headers\n     * @return {?}\n     */\n    keys() { return Array.from(this._normalizedNames.values()); }\n    /**\n     * Sets or overrides header value for given name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    set(name, value) {\n        if (Array.isArray(value)) {\n            if (value.length) {\n                this._headers.set(name.toLowerCase(), [value.join(',')]);\n            }\n        }\n        else {\n            this._headers.set(name.toLowerCase(), [value]);\n        }\n        this.mayBeSetNormalizedName(name);\n    }\n    /**\n     * Returns values of all headers.\n     * @return {?}\n     */\n    values() { return Array.from(this._headers.values()); }\n    /**\n     * Returns string of all headers.\n     * @return {?}\n     */\n    // TODO(vicb): returns {[name: string]: string[]}\n    toJSON() {\n        /** @type {?} */\n        const serialized = {};\n        this._headers.forEach((values, name) => {\n            /** @type {?} */\n            const split = [];\n            values.forEach(v => split.push(...v.split(',')));\n            serialized[(/** @type {?} */ (this._normalizedNames.get(name)))] = split;\n        });\n        return serialized;\n    }\n    /**\n     * Returns list of header values for a given name.\n     * @param {?} name\n     * @return {?}\n     */\n    getAll(name) {\n        return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\n    }\n    /**\n     * This method is not implemented.\n     * @return {?}\n     */\n    entries() { throw new Error('\"entries\" method is not implemented on Headers class'); }\n    /**\n     * @private\n     * @param {?} name\n     * @return {?}\n     */\n    mayBeSetNormalizedName(name) {\n        /** @type {?} */\n        const lcName = name.toLowerCase();\n        if (!this._normalizedNames.has(lcName)) {\n            this._normalizedNames.set(lcName, name);\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Creates a response options object to be optionally provided when instantiating a\n * {\\@link Response}.\n *\n * This class is based on the `ResponseInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\n *\n * All values are null by default. Typical defaults can be found in the\n * {\\@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n *\n * This class may be used in tests to build {\\@link Response Responses} for\n * mock responses (see {\\@link MockBackend}).\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import {ResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new ResponseOptions({\n *   body: '{\"name\":\"Jeff\"}'\n * });\n * var res = new Response(options);\n *\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass ResponseOptions {\n    /**\n     * @param {?=} opts\n     */\n    constructor(opts = {}) {\n        const { body, status, headers, statusText, type, url } = opts;\n        this.body = body != null ? body : null;\n        this.status = status != null ? status : null;\n        this.headers = headers != null ? headers : null;\n        this.statusText = statusText != null ? statusText : null;\n        this.type = type != null ? type : null;\n        this.url = url != null ? url : null;\n    }\n    /**\n     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n     * override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * This may be useful when sharing a base `ResponseOptions` object inside tests,\n     * where certain properties may change from test to test.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * import {ResponseOptions, Response} from '\\@angular/http';\n     *\n     * var options = new ResponseOptions({\n     *   body: {name: 'Jeff'}\n     * });\n     * var res = new Response(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('options.url:', options.url); // null\n     * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n     * console.log('res.url:', res.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    merge(options) {\n        return new ResponseOptions({\n            body: options && options.body != null ? options.body : this.body,\n            status: options && options.status != null ? options.status : this.status,\n            headers: options && options.headers != null ? options.headers : this.headers,\n            statusText: options && options.statusText != null ? options.statusText : this.statusText,\n            type: options && options.type != null ? options.type : this.type,\n            url: options && options.url != null ? options.url : this.url,\n        });\n    }\n}\n/**\n * Subclass of {\\@link ResponseOptions}, with default values.\n *\n * Default values:\n *  * status: 200\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link ResponseOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create {\\@link Response Responses}.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import {provide} from '\\@angular/core';\n * import {bootstrap} from '\\@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n * '\\@angular/http';\n * import {App} from './myapp';\n *\n * class MyOptions extends BaseResponseOptions {\n *   headers:Headers = new Headers({network: 'github'});\n * }\n *\n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Response}\n * object.\n *\n * ### Example\n *\n * ```\n * import {BaseResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new BaseResponseOptions();\n * var res = new Response(options.merge({\n *   body: 'Angular',\n *   headers: new Headers({framework: 'angular'})\n * }));\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n * console.log('res.text():', res.text()); // Angular;\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass BaseResponseOptions extends ResponseOptions {\n    constructor() {\n        super({ status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers() });\n    }\n}\nBaseResponseOptions.ɵfac = function BaseResponseOptions_Factory(t) { return new (t || BaseResponseOptions)(); };\nBaseResponseOptions.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: BaseResponseOptions, factory: BaseResponseOptions.ɵfac });\n/** @nocollapse */\nBaseResponseOptions.ctorParameters = () => [];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BaseResponseOptions, [{\n        type: Injectable\n    }], function () { return []; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Abstract class from which real backends are derived.\n *\n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n * {\\@link Request}.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n * @abstract\n */\nclass ConnectionBackend {\n}\n/**\n * Abstract class from which real connections are derived.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n * @abstract\n */\nclass Connection {\n}\n/**\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n * @abstract\n */\nclass XSRFStrategy {\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} method\n * @return {?}\n */\nfunction normalizeMethodName(method) {\n    if (typeof method !== 'string')\n        return method;\n    switch (method.toUpperCase()) {\n        case 'GET':\n            return RequestMethod.Get;\n        case 'POST':\n            return RequestMethod.Post;\n        case 'PUT':\n            return RequestMethod.Put;\n        case 'DELETE':\n            return RequestMethod.Delete;\n        case 'OPTIONS':\n            return RequestMethod.Options;\n        case 'HEAD':\n            return RequestMethod.Head;\n        case 'PATCH':\n            return RequestMethod.Patch;\n    }\n    throw new Error(`Invalid request method. The method \"${method}\" is not supported.`);\n}\n/** @type {?} */\nconst isSuccess = (status) => (status >= 200 && status < 300);\n/**\n * @param {?} xhr\n * @return {?}\n */\nfunction getResponseURL(xhr) {\n    if ('responseURL' in xhr) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * @param {?} input\n * @return {?}\n */\nfunction stringToArrayBuffer(input) {\n    /** @type {?} */\n    const view = new Uint16Array(input.length);\n    for (let i = 0, strLen = input.length; i < strLen; i++) {\n        view[i] = input.charCodeAt(i);\n    }\n    return view.buffer;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?=} rawParams\n * @return {?}\n */\nfunction paramParser(rawParams = '') {\n    /** @type {?} */\n    const map = new Map();\n    if (rawParams.length > 0) {\n        /** @type {?} */\n        const params = rawParams.split('&');\n        params.forEach((param) => {\n            /** @type {?} */\n            const eqIdx = param.indexOf('=');\n            const [key, val] = eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)];\n            /** @type {?} */\n            const list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\n/**\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n *\n */\nclass QueryEncoder {\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    encodeKey(key) { return standardEncoding(key); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    encodeValue(value) { return standardEncoding(value); }\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n *\n * This class accepts an optional second parameter of ${\\@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n *\n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n *\n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n *\n * ```\n * import {URLSearchParams, QueryEncoder} from '\\@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n *\n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n *\n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass URLSearchParams {\n    /**\n     * @param {?=} rawParams\n     * @param {?=} queryEncoder\n     */\n    constructor(rawParams = '', queryEncoder = new QueryEncoder()) {\n        this.rawParams = rawParams;\n        this.queryEncoder = queryEncoder;\n        this.paramsMap = paramParser(rawParams);\n    }\n    /**\n     * @return {?}\n     */\n    clone() {\n        /** @type {?} */\n        const clone = new URLSearchParams('', this.queryEncoder);\n        clone.appendAll(this);\n        return clone;\n    }\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    has(param) { return this.paramsMap.has(param); }\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    get(param) {\n        /** @type {?} */\n        const storedParam = this.paramsMap.get(param);\n        return Array.isArray(storedParam) ? storedParam[0] : null;\n    }\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    getAll(param) { return this.paramsMap.get(param) || []; }\n    /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    set(param, val) {\n        if (val === void 0 || val === null) {\n            this.delete(param);\n            return;\n        }\n        /** @type {?} */\n        const list = this.paramsMap.get(param) || [];\n        list.length = 0;\n        list.push(val);\n        this.paramsMap.set(param, list);\n    }\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `set(name, values[0])`\n    //\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    setAll(searchParams) {\n        searchParams.paramsMap.forEach((value, param) => {\n            /** @type {?} */\n            const list = this.paramsMap.get(param) || [];\n            list.length = 0;\n            list.push(value[0]);\n            this.paramsMap.set(param, list);\n        });\n    }\n    /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    append(param, val) {\n        if (val === void 0 || val === null)\n            return;\n        /** @type {?} */\n        const list = this.paramsMap.get(param) || [];\n        list.push(val);\n        this.paramsMap.set(param, list);\n    }\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `append(name, value)`\n    // for each value in `values`.\n    //\n    // E.g: \"a=[1,2], c=[8]\" + \"a=[3,4], b=[7]\" = \"a=[1,2,3,4], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    appendAll(searchParams) {\n        searchParams.paramsMap.forEach((value, param) => {\n            /** @type {?} */\n            const list = this.paramsMap.get(param) || [];\n            for (let i = 0; i < value.length; ++i) {\n                list.push(value[i]);\n            }\n            this.paramsMap.set(param, list);\n        });\n    }\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `delete(name)`,\n    // followed by `set(name, values)`\n    //\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4,5,6], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    replaceAll(searchParams) {\n        searchParams.paramsMap.forEach((value, param) => {\n            /** @type {?} */\n            const list = this.paramsMap.get(param) || [];\n            list.length = 0;\n            for (let i = 0; i < value.length; ++i) {\n                list.push(value[i]);\n            }\n            this.paramsMap.set(param, list);\n        });\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        /** @type {?} */\n        const paramsList = [];\n        this.paramsMap.forEach((values, k) => {\n            values.forEach(v => paramsList.push(this.queryEncoder.encodeKey(k) + '=' + this.queryEncoder.encodeValue(v)));\n        });\n        return paramsList.join('&');\n    }\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    delete(param) { this.paramsMap.delete(param); }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * HTTP request body used by both {\\@link Request} and {\\@link Response}\n * https://fetch.spec.whatwg.org/#body\n * @abstract\n */\nclass Body {\n    /**\n     * Attempts to return body as parsed `JSON` object, or raises an exception.\n     * @return {?}\n     */\n    json() {\n        if (typeof this._body === 'string') {\n            return JSON.parse((/** @type {?} */ (this._body)));\n        }\n        if (this._body instanceof ArrayBuffer) {\n            return JSON.parse(this.text());\n        }\n        return this._body;\n    }\n    /**\n     * Returns the body as a string, presuming `toString()` can be called on the response body.\n     *\n     * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n     * bytes in the buffer will be interpreted. Valid values are:\n     *\n     * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n     *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n     *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n     *   into consideration. This is the default behavior to avoid breaking apps, but should be\n     *   considered deprecated.\n     *\n     * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n     * @param {?=} encodingHint\n     * @return {?}\n     */\n    text(encodingHint = 'legacy') {\n        if (this._body instanceof URLSearchParams) {\n            return this._body.toString();\n        }\n        if (this._body instanceof ArrayBuffer) {\n            switch (encodingHint) {\n                case 'legacy':\n                    return String.fromCharCode.apply(null, new Uint16Array((/** @type {?} */ (this._body))));\n                case 'iso-8859':\n                    return String.fromCharCode.apply(null, new Uint8Array((/** @type {?} */ (this._body))));\n                default:\n                    throw new Error(`Invalid value for encodingHint: ${encodingHint}`);\n            }\n        }\n        if (this._body == null) {\n            return '';\n        }\n        if (typeof this._body === 'object') {\n            return JSON.stringify(this._body, null, 2);\n        }\n        return this._body.toString();\n    }\n    /**\n     * Return the body as an ArrayBuffer\n     * @return {?}\n     */\n    arrayBuffer() {\n        if (this._body instanceof ArrayBuffer) {\n            return (/** @type {?} */ (this._body));\n        }\n        return stringToArrayBuffer(this.text());\n    }\n    /**\n     * Returns the request's body as a Blob, assuming that body exists.\n     * @return {?}\n     */\n    blob() {\n        if (this._body instanceof Blob) {\n            return (/** @type {?} */ (this._body));\n        }\n        if (this._body instanceof ArrayBuffer) {\n            return new Blob([this._body]);\n        }\n        throw new Error('The request body isn\\'t either a blob or an array buffer');\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Creates `Response` instances from provided values.\n *\n * Though this object isn't\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n * add data to a view.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n * ```\n *\n * The Response's interface is inspired by the Response constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n * can be accessed many times. There are other differences in the implementation, but this is the\n * most significant.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass Response extends Body {\n    /**\n     * @param {?} responseOptions\n     */\n    constructor(responseOptions) {\n        super();\n        this._body = responseOptions.body;\n        this.status = (/** @type {?} */ (responseOptions.status));\n        this.ok = (this.status >= 200 && this.status <= 299);\n        this.statusText = responseOptions.statusText;\n        this.headers = responseOptions.headers;\n        this.type = (/** @type {?} */ (responseOptions.type));\n        this.url = (/** @type {?} */ (responseOptions.url));\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        return `Response with status: ${this.status} ${this.statusText} for URL: ${this.url}`;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet _nextRequestId = 0;\n/** @type {?} */\nconst JSONP_HOME = '__ng_jsonp__';\n/** @type {?} */\nlet _jsonpConnections = null;\n/**\n * @return {?}\n */\nfunction _getJsonpConnections() {\n    /** @type {?} */\n    const w = typeof window == 'object' ? window : {};\n    if (_jsonpConnections === null) {\n        _jsonpConnections = w[JSONP_HOME] = {};\n    }\n    return _jsonpConnections;\n}\n// Make sure not to evaluate this in a non-browser environment!\nclass BrowserJsonp {\n    // Construct a <script> element with the specified URL\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    build(url) {\n        /** @type {?} */\n        const node = document.createElement('script');\n        node.src = url;\n        return node;\n    }\n    /**\n     * @return {?}\n     */\n    nextRequestID() { return `__req${_nextRequestId++}`; }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    requestCallback(id) { return `${JSONP_HOME}.${id}.finished`; }\n    /**\n     * @param {?} id\n     * @param {?} connection\n     * @return {?}\n     */\n    exposeConnection(id, connection) {\n        /** @type {?} */\n        const connections = _getJsonpConnections();\n        connections[id] = connection;\n    }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    removeConnection(id) {\n        /** @type {?} */\n        const connections = _getJsonpConnections();\n        connections[id] = null;\n    }\n    // Attach the <script> element to the DOM\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    send(node) { document.body.appendChild((/** @type {?} */ ((node)))); }\n    // Remove <script> element from the DOM\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    cleanup(node) {\n        if (node.parentNode) {\n            node.parentNode.removeChild((/** @type {?} */ ((node))));\n        }\n    }\n}\nBrowserJsonp.ɵfac = function BrowserJsonp_Factory(t) { return new (t || BrowserJsonp)(); };\nBrowserJsonp.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: BrowserJsonp, factory: BrowserJsonp.ɵfac });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BrowserJsonp, [{\n        type: Injectable\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n/** @type {?} */\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n/**\n * Base class for an in-flight JSONP request.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass JSONPConnection {\n    /**\n     * \\@internal\n     * @param {?} req\n     * @param {?} _dom\n     * @param {?=} baseResponseOptions\n     */\n    constructor(req, _dom, baseResponseOptions) {\n        this._dom = _dom;\n        this.baseResponseOptions = baseResponseOptions;\n        this._finished = false;\n        if (req.method !== RequestMethod.Get) {\n            throw new TypeError(JSONP_ERR_WRONG_METHOD);\n        }\n        this.request = req;\n        this.response = new Observable((responseObserver) => {\n            this.readyState = ReadyState.Loading;\n            /** @type {?} */\n            const id = this._id = _dom.nextRequestID();\n            _dom.exposeConnection(id, this);\n            // Workaround Dart\n            // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n            /** @type {?} */\n            const callback = _dom.requestCallback(this._id);\n            /** @type {?} */\n            let url = req.url;\n            if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n                url = url.replace('=JSONP_CALLBACK&', `=${callback}&`);\n            }\n            else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n                url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + `=${callback}`;\n            }\n            /** @type {?} */\n            const script = this._script = _dom.build(url);\n            /** @type {?} */\n            const onLoad = (event) => {\n                if (this.readyState === ReadyState.Cancelled)\n                    return;\n                this.readyState = ReadyState.Done;\n                _dom.cleanup(script);\n                if (!this._finished) {\n                    /** @type {?} */\n                    let responseOptions = new ResponseOptions({ body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url });\n                    if (baseResponseOptions) {\n                        responseOptions = baseResponseOptions.merge(responseOptions);\n                    }\n                    responseObserver.error(new Response(responseOptions));\n                    return;\n                }\n                /** @type {?} */\n                let responseOptions = new ResponseOptions({ body: this._responseData, url });\n                if (this.baseResponseOptions) {\n                    responseOptions = this.baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.next(new Response(responseOptions));\n                responseObserver.complete();\n            };\n            /** @type {?} */\n            const onError = (error) => {\n                if (this.readyState === ReadyState.Cancelled)\n                    return;\n                this.readyState = ReadyState.Done;\n                _dom.cleanup(script);\n                /** @type {?} */\n                let responseOptions = new ResponseOptions({ body: error.message, type: ResponseType.Error });\n                if (baseResponseOptions) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.error(new Response(responseOptions));\n            };\n            script.addEventListener('load', onLoad);\n            script.addEventListener('error', onError);\n            _dom.send(script);\n            return () => {\n                this.readyState = ReadyState.Cancelled;\n                script.removeEventListener('load', onLoad);\n                script.removeEventListener('error', onError);\n                this._dom.cleanup(script);\n            };\n        });\n    }\n    /**\n     * Callback called when the JSONP request completes, to notify the application\n     * of the new data.\n     * @param {?=} data\n     * @return {?}\n     */\n    finished(data) {\n        // Don't leak connections\n        this._finished = true;\n        this._dom.removeConnection(this._id);\n        if (this.readyState === ReadyState.Cancelled)\n            return;\n        this._responseData = data;\n    }\n}\n/**\n * A {\\@link ConnectionBackend} that uses the JSONP strategy of making requests.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass JSONPBackend extends ConnectionBackend {\n    /**\n     * \\@internal\n     * @param {?} _browserJSONP\n     * @param {?} _baseResponseOptions\n     */\n    constructor(_browserJSONP, _baseResponseOptions) {\n        super();\n        this._browserJSONP = _browserJSONP;\n        this._baseResponseOptions = _baseResponseOptions;\n    }\n    /**\n     * @param {?} request\n     * @return {?}\n     */\n    createConnection(request) {\n        return new JSONPConnection(request, this._browserJSONP, this._baseResponseOptions);\n    }\n}\nJSONPBackend.ɵfac = function JSONPBackend_Factory(t) { return new (t || JSONPBackend)(ɵngcc0.ɵɵinject(BrowserJsonp), ɵngcc0.ɵɵinject(ResponseOptions)); };\nJSONPBackend.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: JSONPBackend, factory: JSONPBackend.ɵfac });\n/** @nocollapse */\nJSONPBackend.ctorParameters = () => [\n    { type: BrowserJsonp },\n    { type: ResponseOptions }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JSONPBackend, [{\n        type: Injectable\n    }], function () { return [{ type: BrowserJsonp }, { type: ResponseOptions }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n *\n * This class would typically not be created or interacted with directly inside applications, though\n * the {\\@link MockConnection} may be interacted with in tests.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass XHRConnection {\n    /**\n     * @param {?} req\n     * @param {?} browserXHR\n     * @param {?=} baseResponseOptions\n     */\n    constructor(req, browserXHR, baseResponseOptions) {\n        this.request = req;\n        this.response = new Observable((responseObserver) => {\n            /** @type {?} */\n            const _xhr = browserXHR.build();\n            _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n            if (req.withCredentials != null) {\n                _xhr.withCredentials = req.withCredentials;\n            }\n            // load event handler\n            /** @type {?} */\n            const onLoad = () => {\n                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n                /** @type {?} */\n                let status = _xhr.status === 1223 ? 204 : _xhr.status;\n                /** @type {?} */\n                let body = null;\n                // HTTP 204 means no content\n                if (status !== 204) {\n                    // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n                    // response/responseType properties were introduced in ResourceLoader Level2 spec\n                    // (supported by IE10)\n                    body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\n                    // Implicitly strip a potential XSSI prefix.\n                    if (typeof body === 'string') {\n                        body = body.replace(XSSI_PREFIX, '');\n                    }\n                }\n                // fix status code when it is 0 (0 status is undocumented).\n                // Occurs when accessing file resources or on Android 4.1 stock browser\n                // while retrieving files from application cache.\n                if (status === 0) {\n                    status = body ? 200 : 0;\n                }\n                /** @type {?} */\n                const headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n                // IE 9 does not provide the way to get URL of response\n                /** @type {?} */\n                const url = getResponseURL(_xhr) || req.url;\n                /** @type {?} */\n                const statusText = _xhr.statusText || 'OK';\n                /** @type {?} */\n                let responseOptions = new ResponseOptions({ body, status, headers, statusText, url });\n                if (baseResponseOptions != null) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                /** @type {?} */\n                const response = new Response(responseOptions);\n                response.ok = isSuccess(status);\n                if (response.ok) {\n                    responseObserver.next(response);\n                    // TODO(gdi2290): defer complete if array buffer until done\n                    responseObserver.complete();\n                    return;\n                }\n                responseObserver.error(response);\n            };\n            // error event handler\n            /** @type {?} */\n            const onError = (err) => {\n                /** @type {?} */\n                let responseOptions = new ResponseOptions({\n                    body: err,\n                    type: ResponseType.Error,\n                    status: _xhr.status,\n                    statusText: _xhr.statusText,\n                });\n                if (baseResponseOptions != null) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.error(new Response(responseOptions));\n            };\n            this.setDetectedContentType(req, _xhr);\n            if (req.headers == null) {\n                req.headers = new Headers();\n            }\n            if (!req.headers.has('Accept')) {\n                req.headers.append('Accept', 'application/json, text/plain, */*');\n            }\n            req.headers.forEach((values, name) => _xhr.setRequestHeader((/** @type {?} */ (name)), values.join(',')));\n            // Select the correct buffer type to store the response\n            if (req.responseType != null && _xhr.responseType != null) {\n                switch (req.responseType) {\n                    case ResponseContentType.ArrayBuffer:\n                        _xhr.responseType = 'arraybuffer';\n                        break;\n                    case ResponseContentType.Json:\n                        _xhr.responseType = 'json';\n                        break;\n                    case ResponseContentType.Text:\n                        _xhr.responseType = 'text';\n                        break;\n                    case ResponseContentType.Blob:\n                        _xhr.responseType = 'blob';\n                        break;\n                    default:\n                        throw new Error('The selected responseType is not supported');\n                }\n            }\n            _xhr.addEventListener('load', onLoad);\n            _xhr.addEventListener('error', onError);\n            _xhr.send(this.request.getBody());\n            return () => {\n                _xhr.removeEventListener('load', onLoad);\n                _xhr.removeEventListener('error', onError);\n                _xhr.abort();\n            };\n        });\n    }\n    /**\n     * @param {?} req\n     * @param {?} _xhr\n     * @return {?}\n     */\n    setDetectedContentType(req /** TODO Request */, _xhr /** XMLHttpRequest */) {\n        // Skip if a custom Content-Type header is provided\n        if (req.headers != null && req.headers.get('Content-Type') != null) {\n            return;\n        }\n        // Set the detected content type\n        switch (req.contentType) {\n            case ContentType.NONE:\n                break;\n            case ContentType.JSON:\n                _xhr.setRequestHeader('content-type', 'application/json');\n                break;\n            case ContentType.FORM:\n                _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n                break;\n            case ContentType.TEXT:\n                _xhr.setRequestHeader('content-type', 'text/plain');\n                break;\n            case ContentType.BLOB:\n                /** @type {?} */\n                const blob = req.blob();\n                if (blob.type) {\n                    _xhr.setRequestHeader('content-type', blob.type);\n                }\n                break;\n        }\n    }\n}\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n *\n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass CookieXSRFStrategy {\n    /**\n     * @param {?=} _cookieName\n     * @param {?=} _headerName\n     */\n    constructor(_cookieName = 'XSRF-TOKEN', _headerName = 'X-XSRF-TOKEN') {\n        this._cookieName = _cookieName;\n        this._headerName = _headerName;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    configureRequest(req) {\n        /** @type {?} */\n        const xsrfToken = ɵgetDOM().getCookie(this._cookieName);\n        if (xsrfToken) {\n            req.headers.set(this._headerName, xsrfToken);\n        }\n    }\n}\n/**\n * Creates {\\@link XHRConnection} instances.\n *\n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\\@angular/http';\n * \\@Component({\n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass XHRBackend {\n    /**\n     * @param {?} _browserXHR\n     * @param {?} _baseResponseOptions\n     * @param {?} _xsrfStrategy\n     */\n    constructor(_browserXHR, _baseResponseOptions, _xsrfStrategy) {\n        this._browserXHR = _browserXHR;\n        this._baseResponseOptions = _baseResponseOptions;\n        this._xsrfStrategy = _xsrfStrategy;\n    }\n    /**\n     * @param {?} request\n     * @return {?}\n     */\n    createConnection(request) {\n        this._xsrfStrategy.configureRequest(request);\n        return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n    }\n}\nXHRBackend.ɵfac = function XHRBackend_Factory(t) { return new (t || XHRBackend)(ɵngcc0.ɵɵinject(BrowserXhr), ɵngcc0.ɵɵinject(ResponseOptions), ɵngcc0.ɵɵinject(XSRFStrategy)); };\nXHRBackend.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: XHRBackend, factory: XHRBackend.ɵfac });\n/** @nocollapse */\nXHRBackend.ctorParameters = () => [\n    { type: BrowserXhr },\n    { type: ResponseOptions },\n    { type: XSRFStrategy }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(XHRBackend, [{\n        type: Injectable\n    }], function () { return [{ type: BrowserXhr }, { type: ResponseOptions }, { type: XSRFStrategy }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {\\@link Request}.\n *\n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n *\n * All values are null by default. Typical defaults can be found in the {\\@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n *\n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * const req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass RequestOptions {\n    /**\n     * @deprecated from 4.0.0. Use params instead.\n     * @return {?}\n     */\n    get search() { return this.params; }\n    /**\n     * @deprecated from 4.0.0. Use params instead.\n     * @param {?} params\n     * @return {?}\n     */\n    set search(params) { this.params = params; }\n    // TODO(Dzmitry): remove search when this.search is removed\n    /**\n     * @param {?=} opts\n     */\n    constructor(opts = {}) {\n        const { method, headers, body, url, search, params, withCredentials, responseType } = opts;\n        this.method = method != null ? normalizeMethodName(method) : null;\n        this.headers = headers != null ? headers : null;\n        this.body = body != null ? body : null;\n        this.url = url != null ? url : null;\n        this.params = this._mergeSearchParams(params || search);\n        this.withCredentials = withCredentials != null ? withCredentials : null;\n        this.responseType = responseType != null ? responseType : null;\n    }\n    /**\n     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * Note that `headers` and `search` will override existing values completely if present in\n     * the `options` object. If these values should be merged, it should be done prior to calling\n     * `merge` on the `RequestOptions` instance.\n     *\n     * ```typescript\n     * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n     *\n     * const options = new RequestOptions({\n     *   method: RequestMethod.Post\n     * });\n     * const req = new Request(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('req.method:', RequestMethod[req.method]); // Post\n     * console.log('options.url:', options.url); // null\n     * console.log('req.url:', req.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    merge(options) {\n        return new RequestOptions({\n            method: options && options.method != null ? options.method : this.method,\n            headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n            body: options && options.body != null ? options.body : this.body,\n            url: options && options.url != null ? options.url : this.url,\n            params: options && this._mergeSearchParams(options.params || options.search),\n            withCredentials: options && options.withCredentials != null ? options.withCredentials :\n                this.withCredentials,\n            responseType: options && options.responseType != null ? options.responseType :\n                this.responseType\n        });\n    }\n    /**\n     * @private\n     * @param {?=} params\n     * @return {?}\n     */\n    _mergeSearchParams(params) {\n        if (!params)\n            return this.params;\n        if (params instanceof URLSearchParams) {\n            return params.clone();\n        }\n        if (typeof params === 'string') {\n            return new URLSearchParams(params);\n        }\n        return this._parseParams(params);\n    }\n    /**\n     * @private\n     * @param {?=} objParams\n     * @return {?}\n     */\n    _parseParams(objParams = {}) {\n        /** @type {?} */\n        const params = new URLSearchParams();\n        Object.keys(objParams).forEach((key) => {\n            /** @type {?} */\n            const value = objParams[key];\n            if (Array.isArray(value)) {\n                value.forEach((item) => this._appendParam(key, item, params));\n            }\n            else {\n                this._appendParam(key, value, params);\n            }\n        });\n        return params;\n    }\n    /**\n     * @private\n     * @param {?} key\n     * @param {?} value\n     * @param {?} params\n     * @return {?}\n     */\n    _appendParam(key, value, params) {\n        if (typeof value !== 'string') {\n            value = JSON.stringify(value);\n        }\n        params.append(key, value);\n    }\n}\n/**\n * Subclass of {\\@link RequestOptions}, with default values.\n *\n * Default values:\n *  * method: {\\@link RequestMethod RequestMethod.Get}\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link RequestOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create and send {\\@link Request Requests}.\n *\n * ```typescript\n * import {BaseRequestOptions, RequestOptions} from '\\@angular/http';\n *\n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n *\n * {provide: RequestOptions, useClass: MyOptions};\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Request}\n * object.\n *\n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new BaseRequestOptions();\n * const req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass BaseRequestOptions extends RequestOptions {\n    constructor() { super({ method: RequestMethod.Get, headers: new Headers() }); }\n}\nBaseRequestOptions.ɵfac = function BaseRequestOptions_Factory(t) { return new (t || BaseRequestOptions)(); };\nBaseRequestOptions.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: BaseRequestOptions, factory: BaseRequestOptions.ɵfac });\n/** @nocollapse */\nBaseRequestOptions.ctorParameters = () => [];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BaseRequestOptions, [{\n        type: Injectable\n    }], function () { return []; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO(jeffbcross): properly implement body accessors\n/**\n * Creates `Request` instances from provided values.\n *\n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n *\n * `Request` instances are typically created by higher-level classes, like {\\@link Http} and\n * {\\@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {\\@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n *\n * ```typescript\n * import {Injectable, Injector} from '\\@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '\\@angular/http';\n *\n * \\@Injectable()\n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass Request extends Body {\n    /**\n     * @param {?} requestOptions\n     */\n    constructor(requestOptions) {\n        super();\n        // TODO: assert that url is present\n        /** @type {?} */\n        const url = requestOptions.url;\n        this.url = (/** @type {?} */ (requestOptions.url));\n        /** @type {?} */\n        const paramsArg = requestOptions.params || requestOptions.search;\n        if (paramsArg) {\n            /** @type {?} */\n            let params;\n            if (typeof paramsArg === 'object' && !(paramsArg instanceof URLSearchParams)) {\n                params = urlEncodeParams(paramsArg).toString();\n            }\n            else {\n                params = paramsArg.toString();\n            }\n            if (params.length > 0) {\n                /** @type {?} */\n                let prefix = '?';\n                if (this.url.indexOf('?') != -1) {\n                    prefix = (this.url[this.url.length - 1] == '&') ? '' : '&';\n                }\n                // TODO: just delete search-query-looking string in url?\n                this.url = url + prefix + params;\n            }\n        }\n        this._body = requestOptions.body;\n        this.method = normalizeMethodName((/** @type {?} */ (requestOptions.method)));\n        // TODO(jeffbcross): implement behavior\n        // Defaults to 'omit', consistent with browser\n        this.headers = new Headers(requestOptions.headers);\n        this.contentType = this.detectContentType();\n        this.withCredentials = (/** @type {?} */ (requestOptions.withCredentials));\n        this.responseType = (/** @type {?} */ (requestOptions.responseType));\n    }\n    /**\n     * Returns the content type enum based on header options.\n     * @return {?}\n     */\n    detectContentType() {\n        switch (this.headers.get('content-type')) {\n            case 'application/json':\n                return ContentType.JSON;\n            case 'application/x-www-form-urlencoded':\n                return ContentType.FORM;\n            case 'multipart/form-data':\n                return ContentType.FORM_DATA;\n            case 'text/plain':\n            case 'text/html':\n                return ContentType.TEXT;\n            case 'application/octet-stream':\n                return this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n            default:\n                return this.detectContentTypeFromBody();\n        }\n    }\n    /**\n     * Returns the content type of request's body based on its type.\n     * @return {?}\n     */\n    detectContentTypeFromBody() {\n        if (this._body == null) {\n            return ContentType.NONE;\n        }\n        else if (this._body instanceof URLSearchParams) {\n            return ContentType.FORM;\n        }\n        else if (this._body instanceof FormData) {\n            return ContentType.FORM_DATA;\n        }\n        else if (this._body instanceof Blob$1) {\n            return ContentType.BLOB;\n        }\n        else if (this._body instanceof ArrayBuffer$1) {\n            return ContentType.ARRAY_BUFFER;\n        }\n        else if (this._body && typeof this._body === 'object') {\n            return ContentType.JSON;\n        }\n        else {\n            return ContentType.TEXT;\n        }\n    }\n    /**\n     * Returns the request's body according to its type. If body is undefined, return\n     * null.\n     * @return {?}\n     */\n    getBody() {\n        switch (this.contentType) {\n            case ContentType.JSON:\n                return this.text();\n            case ContentType.FORM:\n                return this.text();\n            case ContentType.FORM_DATA:\n                return this._body;\n            case ContentType.TEXT:\n                return this.text();\n            case ContentType.BLOB:\n                return this.blob();\n            case ContentType.ARRAY_BUFFER:\n                return this.arrayBuffer();\n            default:\n                return null;\n        }\n    }\n}\n/**\n * @param {?} params\n * @return {?}\n */\nfunction urlEncodeParams(params) {\n    /** @type {?} */\n    const searchParams = new URLSearchParams();\n    Object.keys(params).forEach(key => {\n        /** @type {?} */\n        const value = params[key];\n        if (value && Array.isArray(value)) {\n            value.forEach(element => searchParams.append(key, element.toString()));\n        }\n        else {\n            searchParams.append(key, value.toString());\n        }\n    });\n    return searchParams;\n}\n/** @type {?} */\nconst noop = function () { };\n/** @type {?} */\nconst w = typeof window == 'object' ? window : noop;\n/** @type {?} */\nconst FormData = ((/** @type {?} */ (w)))['FormData'] || noop;\n/** @type {?} */\nconst Blob$1 = ((/** @type {?} */ (w)))['Blob'] || noop;\n/** @type {?} */\nconst ArrayBuffer$1 = ((/** @type {?} */ (w)))['ArrayBuffer'] || noop;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} backend\n * @param {?} request\n * @return {?}\n */\nfunction httpRequest(backend, request) {\n    return backend.createConnection(request).response;\n}\n/**\n * @param {?} defaultOpts\n * @param {?} providedOpts\n * @param {?} method\n * @param {?} url\n * @return {?}\n */\nfunction mergeOptions(defaultOpts, providedOpts, method, url) {\n    /** @type {?} */\n    const newOptions = defaultOpts;\n    if (providedOpts) {\n        // Hack so Dart can used named parameters\n        return (/** @type {?} */ (newOptions.merge(new RequestOptions({\n            method: providedOpts.method || method,\n            url: providedOpts.url || url,\n            search: providedOpts.search,\n            params: providedOpts.params,\n            headers: providedOpts.headers,\n            body: providedOpts.body,\n            withCredentials: providedOpts.withCredentials,\n            responseType: providedOpts.responseType\n        }))));\n    }\n    return (/** @type {?} */ (newOptions.merge(new RequestOptions({ method, url }))));\n}\n/**\n * Performs http requests using `XMLHttpRequest` as the default backend.\n *\n * `Http` is available as an injectable class, with methods to perform http requests. Calling\n * `request` returns an `Observable` which will emit a single {\\@link Response} when a\n * response is received.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import {Http, HTTP_PROVIDERS} from '\\@angular/http';\n * import {map} from 'rxjs/operators';\n *\n * \\@Component({\n *   selector: 'http-app',\n *   viewProviders: [HTTP_PROVIDERS],\n *   templateUrl: 'people.html'\n * })\n * class PeopleComponent {\n *   constructor(http: Http) {\n *     http.get('people.json')\n *       // Call map on the response observable to get the parsed people object\n *       .pipe(map(res => res.json()))\n *       // Subscribe to the observable to get the parsed people object and attach it to the\n *       // component\n *       .subscribe(people => this.people = people);\n *   }\n * }\n * ```\n *\n *\n * ### Example\n *\n * ```\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n * ```\n *\n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n * {\\@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n * the {\\@link XHRBackend} provider, as in the following example:\n *\n * ### Example\n *\n * ```typescript\n * import {BaseRequestOptions, Http} from '\\@angular/http';\n * import {MockBackend} from '\\@angular/http/testing';\n * var injector = Injector.resolveAndCreate([\n *   BaseRequestOptions,\n *   MockBackend,\n *   {provide: Http, useFactory:\n *       function(backend, defaultOptions) {\n *         return new Http(backend, defaultOptions);\n *       },\n *       deps: [MockBackend, BaseRequestOptions]}\n * ]);\n * var http = injector.get(Http);\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass Http {\n    /**\n     * @param {?} _backend\n     * @param {?} _defaultOptions\n     */\n    constructor(_backend, _defaultOptions) {\n        this._backend = _backend;\n        this._defaultOptions = _defaultOptions;\n    }\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    request(url, options) {\n        /** @type {?} */\n        let responseObservable;\n        if (typeof url === 'string') {\n            responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, (/** @type {?} */ (url)))));\n        }\n        else if (url instanceof Request) {\n            responseObservable = httpRequest(this._backend, url);\n        }\n        else {\n            throw new Error('First argument must be a url string or Request instance.');\n        }\n        return responseObservable;\n    }\n    /**\n     * Performs a request with `get` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    get(url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n    }\n    /**\n     * Performs a request with `post` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    post(url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Post, url)));\n    }\n    /**\n     * Performs a request with `put` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    put(url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Put, url)));\n    }\n    /**\n     * Performs a request with `delete` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    delete(url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n    }\n    /**\n     * Performs a request with `patch` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    patch(url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Patch, url)));\n    }\n    /**\n     * Performs a request with `head` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    head(url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n    }\n    /**\n     * Performs a request with `options` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    options(url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));\n    }\n}\nHttp.ɵfac = function Http_Factory(t) { return new (t || Http)(ɵngcc0.ɵɵinject(ConnectionBackend), ɵngcc0.ɵɵinject(RequestOptions)); };\nHttp.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: Http, factory: Http.ɵfac });\n/** @nocollapse */\nHttp.ctorParameters = () => [\n    { type: ConnectionBackend },\n    { type: RequestOptions }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Http, [{\n        type: Injectable\n    }], function () { return [{ type: ConnectionBackend }, { type: RequestOptions }]; }, null); })();\n/**\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass Jsonp extends Http {\n    /**\n     * @param {?} backend\n     * @param {?} defaultOptions\n     */\n    constructor(backend, defaultOptions) {\n        super(backend, defaultOptions);\n    }\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     *\n     * \\@security Regular XHR is the safest alternative to JSONP for most applications, and is\n     * supported by all current browsers. Because JSONP creates a `<script>` element with\n     * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n     * source could expose your application to XSS risks. Data exposed by JSONP may also be\n     * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n     * future security issues (e.g. content sniffing).  For more detail, see the\n     * [Security Guide](http://g.co/ng/security).\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    request(url, options) {\n        /** @type {?} */\n        let responseObservable;\n        if (typeof url === 'string') {\n            url =\n                new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, (/** @type {?} */ (url))));\n        }\n        if (url instanceof Request) {\n            if (url.method !== RequestMethod.Get) {\n                throw new Error('JSONP requests must use GET request method.');\n            }\n            responseObservable = httpRequest(this._backend, url);\n        }\n        else {\n            throw new Error('First argument must be a url string or Request instance.');\n        }\n        return responseObservable;\n    }\n}\nJsonp.ɵfac = function Jsonp_Factory(t) { return new (t || Jsonp)(ɵngcc0.ɵɵinject(ConnectionBackend), ɵngcc0.ɵɵinject(RequestOptions)); };\nJsonp.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: Jsonp, factory: Jsonp.ɵfac });\n/** @nocollapse */\nJsonp.ctorParameters = () => [\n    { type: ConnectionBackend },\n    { type: RequestOptions }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Jsonp, [{\n        type: Injectable\n    }], function () { return [{ type: ConnectionBackend }, { type: RequestOptions }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction _createDefaultCookieXSRFStrategy() {\n    return new CookieXSRFStrategy();\n}\n/**\n * @param {?} xhrBackend\n * @param {?} requestOptions\n * @return {?}\n */\nfunction httpFactory(xhrBackend, requestOptions) {\n    return new Http(xhrBackend, requestOptions);\n}\n/**\n * @param {?} jsonpBackend\n * @param {?} requestOptions\n * @return {?}\n */\nfunction jsonpFactory(jsonpBackend, requestOptions) {\n    return new Jsonp(jsonpBackend, requestOptions);\n}\n/**\n * The module that includes http's providers\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass HttpModule {\n}\nHttpModule.ɵfac = function HttpModule_Factory(t) { return new (t || HttpModule)(); };\nHttpModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: HttpModule });\nHttpModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        // TODO(pascal): use factory type annotations once supported in DI\n        // issue: https://github.com/angular/angular/issues/3183\n        { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },\n        BrowserXhr,\n        { provide: RequestOptions, useClass: BaseRequestOptions },\n        { provide: ResponseOptions, useClass: BaseResponseOptions },\n        XHRBackend,\n        { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },\n    ] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpModule, [{\n        type: NgModule,\n        args: [{\n                providers: [\n                    // TODO(pascal): use factory type annotations once supported in DI\n                    // issue: https://github.com/angular/angular/issues/3183\n                    { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },\n                    BrowserXhr,\n                    { provide: RequestOptions, useClass: BaseRequestOptions },\n                    { provide: ResponseOptions, useClass: BaseResponseOptions },\n                    XHRBackend,\n                    { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },\n                ]\n            }]\n    }], null, null); })();\n/**\n * The module that includes jsonp's providers\n *\n * @deprecated see https://angular.io/api/common/http/HttpClient#jsonp\n * \\@publicApi\n */\nclass JsonpModule {\n}\nJsonpModule.ɵfac = function JsonpModule_Factory(t) { return new (t || JsonpModule)(); };\nJsonpModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: JsonpModule });\nJsonpModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        // TODO(pascal): use factory type annotations once supported in DI\n        // issue: https://github.com/angular/angular/issues/3183\n        { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },\n        BrowserJsonp,\n        { provide: RequestOptions, useClass: BaseRequestOptions },\n        { provide: ResponseOptions, useClass: BaseResponseOptions },\n        JSONPBackend,\n    ] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JsonpModule, [{\n        type: NgModule,\n        args: [{\n                providers: [\n                    // TODO(pascal): use factory type annotations once supported in DI\n                    // issue: https://github.com/angular/angular/issues/3183\n                    { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },\n                    BrowserJsonp,\n                    { provide: RequestOptions, useClass: BaseRequestOptions },\n                    { provide: ResponseOptions, useClass: BaseResponseOptions },\n                    JSONPBackend,\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n * @type {?}\n */\nconst VERSION = new Version('7.2.16');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BrowserJsonp as ɵangular_packages_http_http_e, Body as ɵangular_packages_http_http_f, _createDefaultCookieXSRFStrategy as ɵangular_packages_http_http_a, httpFactory as ɵangular_packages_http_http_b, jsonpFactory as ɵangular_packages_http_http_c, BrowserXhr, JSONPBackend, JSONPConnection, CookieXSRFStrategy, XHRBackend, XHRConnection, BaseRequestOptions, RequestOptions, BaseResponseOptions, ResponseOptions, ReadyState, RequestMethod, ResponseContentType, ResponseType, Headers, Http, Jsonp, HttpModule, JsonpModule, Connection, ConnectionBackend, XSRFStrategy, Request, Response, QueryEncoder, URLSearchParams, VERSION };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}